<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSM的配置</title>
      <link href="2021/01/10/ssm%E9%85%8D%E7%BD%AE/"/>
      <url>2021/01/10/ssm%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM的配置"><a href="#SSM的配置" class="headerlink" title="SSM的配置"></a>SSM的配置</h1><h2 id="spring的核心配置"><a href="#spring的核心配置" class="headerlink" title="spring的核心配置"></a>spring的核心配置</h2><h3 id="1-一般情况"><a href="#1-一般情况" class="headerlink" title="1.一般情况"></a>1.一般情况</h3><blockquote><p>需要的jar包</p></blockquote><pre><code class="xml">&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;&lt;version&gt;5.2.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><blockquote><p>配置核心配置文件applicationContext.xml</p></blockquote><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;    &lt;context:annotation-config/&gt; &lt;!-- 使得@Componnent等注解生效，不用再手动&lt;bean/&gt;--&gt;    &lt;context:component-scan base-package=&quot;org.example.bean&quot;/&gt; &lt;!--具体bean位置--&gt;&lt;/beans&gt;</code></pre><blockquote><p>除此外web项目开发还需要再web.xml中添加监听器，启动spring容器让配置文件生效</p></blockquote><pre><code class="xml">&lt;listener&gt;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;context-param&gt;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;</code></pre><h3 id="2-添加aop注解配置"><a href="#2-添加aop注解配置" class="headerlink" title="2. 添加aop注解配置"></a>2. 添加aop注解配置</h3><blockquote><p>需要另外补充aspectjweaver.jar包</p></blockquote><pre><code class="xml">&lt;dependency&gt;&lt;groupId&gt;org.aspectj&lt;/groupId&gt;&lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;&lt;version&gt;1.9.6&lt;/version&gt;&lt;/dependency&gt;</code></pre><blockquote><p>在applicationContext.xml中添加开启自动代理</p></blockquote><pre><code class="xml">&lt;context:component-scan base-package=&quot;org.example.aspect&quot;/&gt;&lt;aop:aspectj-autoproxy/&gt;</code></pre><p>接下来就可以用@Aspect注解的方式来切面编程了</p><h2 id="springMVC的配置"><a href="#springMVC的配置" class="headerlink" title="springMVC的配置"></a>springMVC的配置</h2><p>这里的模板引擎用的Themeleaf、JSON数据转换用的fastjson</p><blockquote><p>需要的jar包</p></blockquote><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;    &lt;version&gt;1.2.68&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;    &lt;artifactId&gt;thymeleaf&lt;/artifactId&gt;    &lt;version&gt;3.0.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;    &lt;artifactId&gt;thymeleaf-spring4&lt;/artifactId&gt;    &lt;version&gt;3.0.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;    &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;    &lt;version&gt;4.0.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><blockquote><p>springMVC的配置springmvc-servlet.xml</p></blockquote><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        https://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;org.example.controller&quot;/&gt;    &lt;!--    使springmvc注解生效--&gt;    &lt;mvc:annotation-driven &gt;        &lt;mvc:message-converters&gt;            &lt;!--            使JSON格式类型接受任意形式的Java类型对象--&gt;            &lt;bean id=&quot;fastjson&quot; class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;&gt;                &lt;property name=&quot;supportedMediaTypes&quot;&gt;                    &lt;list&gt;                        &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;                        &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;                    &lt;/list&gt;                &lt;/property&gt;            &lt;/bean&gt;        &lt;/mvc:message-converters&gt;    &lt;/mvc:annotation-driven&gt;    &lt;!-- 静态资源过滤映射 --&gt;    &lt;mvc:default-servlet-handler/&gt;&lt;!--    处理器映射器--&gt;    &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;&lt;!--处理器适配器--&gt;    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;    &lt;!-- 试图解析器  thymeleaf --&gt;    &lt;bean  id=&quot;templateResolver&quot; class=&quot;org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver&quot;&gt;        &lt;!-- 映射页面位置 --&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot; /&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.html&quot; /&gt;        &lt;property name=&quot;templateMode&quot; value=&quot;HTML&quot; /&gt;        &lt;property name=&quot;cacheable&quot; value=&quot;false&quot; /&gt;        &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot;/&gt;&lt;!--不加会乱码--&gt;    &lt;/bean&gt;    &lt;bean id=&quot;templateEngine&quot;          class=&quot;org.thymeleaf.spring4.SpringTemplateEngine&quot;&gt;        &lt;property name=&quot;templateResolver&quot; ref=&quot;templateResolver&quot; /&gt;    &lt;/bean&gt;    &lt;bean class=&quot;org.thymeleaf.spring4.view.ThymeleafViewResolver&quot;&gt;        &lt;property name=&quot;templateEngine&quot; ref=&quot;templateEngine&quot; /&gt;        &lt;!--解决中文乱码--&gt;        &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><blockquote><p>web.xml中启用DispatcherServlet</p></blockquote><pre><code class="xml">&lt;servlet&gt;    &lt;servlet-name&gt;app&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;/WEB-INF/springmvc-servlet.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;!--    /  匹配所有的请求，（不包括.jsp）--&gt;&lt;!--    /*  匹配所有的请求，（包括.jsp）--&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;app&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;filter&gt;    &lt;filter-name&gt;encoding&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;utf-8&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;encoding&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;</code></pre><h2 id="Mybatis的配置"><a href="#Mybatis的配置" class="headerlink" title="Mybatis的配置"></a>Mybatis的配置</h2><h3 id="1-一般配置"><a href="#1-一般配置" class="headerlink" title="1. 一般配置"></a>1. 一般配置</h3><blockquote><p>需要的jar包</p></blockquote><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;5.1.47&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;!--包含了tx模块--&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;    &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;    &lt;version&gt;3.5.5&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;    &lt;version&gt;2.0.5&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid&lt;/artifactId&gt;    &lt;version&gt;1.1.22&lt;/version&gt;&lt;/dependency&gt;</code></pre><blockquote><p>数据源的配置</p></blockquote><p>database-config.properties</p><pre><code class="properties">jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/mybatistest?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=falsejdbc.username=rootjdbc.password=123456</code></pre><p>mybatis-config.xml</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;settings&gt;&lt;!--设置mybatis输出日志--&gt;        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;    &lt;/settings&gt;    &lt;mappers&gt;&lt;!--所有的sql映射文件--&gt;        &lt;mapper resource=&quot;mappers/BlogMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p>applicationContext.xml</p><pre><code class="xml">&lt;!--配置数据源--&gt;&lt;context:property-placeholder location=&quot;classpath:database-config.properties&quot;/&gt;&lt;bean id=&quot;myDataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driver}&quot;/&gt;    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&gt;    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&gt;    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&gt;    &lt;!-- 配置初始化大小、最小、最大 --&gt;    &lt;property name=&quot;initialSize&quot; value=&quot;5&quot; /&gt;    &lt;property name=&quot;minIdle&quot; value=&quot;10&quot; /&gt;    &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt;    &lt;!-- 配置获取连接等待超时的时间 --&gt;    &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt;&lt;/bean&gt;&lt;!--声明一个SqlSessionFactoryBean类，用来创建SqlSessionFactory--&gt;&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot;/&gt;    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;&lt;/bean&gt;</code></pre><blockquote><p>将mybatis-config.xml中的sql映射与dao层的接口对应</p></blockquote><p>applicationContext.xml</p><pre><code class="xml">&lt;!-- 配置dao接口扫描包，动态的实现了Dao接口可以注入到Spring容器中--&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;    &lt;!--指定SqlSessionFactory对象的id--&gt;    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;    &lt;!--指定包名，MapperScannerConfigurer会扫描这个包中的接口，把每个接口都执行一个getMapper方法--&gt;    &lt;property name=&quot;basePackage&quot; value=&quot;org.example.dao&quot;/&gt;&lt;/bean&gt;</code></pre><h3 id="2-事务配置"><a href="#2-事务配置" class="headerlink" title="2. 事务配置"></a>2. 事务配置</h3><blockquote><p>事务的配置</p></blockquote><p>jar包</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;    &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>applicationContext.xml</p><pre><code class="xml">&lt;!-- 为数据源添加事务管理器 --&gt;&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 为事务管理器注册驱动器 --&gt;&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;/&gt;</code></pre><p>接下来就可以用@Transactional注解了</p><h2 id="自动代码生成mybatis-generator"><a href="#自动代码生成mybatis-generator" class="headerlink" title="自动代码生成mybatis-generator"></a>自动代码生成mybatis-generator</h2><p><a href="https://buddyxiao.github.io/2020/04/27/%E4%BD%BF%E7%94%A8mybatis-generator/">地址:https://buddyxiao.github.io/2020/04/27/%E4%BD%BF%E7%94%A8mybatis-generator/</a></p><h2 id="所有的配置和依赖汇总"><a href="#所有的配置和依赖汇总" class="headerlink" title="所有的配置和依赖汇总"></a>所有的配置和依赖汇总</h2><h3 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a>1. pom.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0         http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;org.example&lt;/groupId&gt;    &lt;artifactId&gt;springtest&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;packaging&gt;war&lt;/packaging&gt;    &lt;properties&gt;        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;!--springweb开发核心--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;            &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--aop支持 包含aspectjweaver--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;            &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--json和thymeleaf--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;            &lt;version&gt;1.2.68&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;            &lt;artifactId&gt;thymeleaf&lt;/artifactId&gt;            &lt;version&gt;3.0.11.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;            &lt;artifactId&gt;thymeleaf-spring5&lt;/artifactId&gt;            &lt;version&gt;3.0.11.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--数据库连接驱动和连接池--&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.47&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid&lt;/artifactId&gt;            &lt;version&gt;1.1.22&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;&lt;!--包括了事务tx--&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;            &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--mybatis的引入--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;            &lt;version&gt;3.5.5&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;            &lt;version&gt;2.0.5&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--javawebAPI--&gt;       &lt;dependency&gt;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;            &lt;version&gt;4.0.1&lt;/version&gt;        &lt;/dependency&gt;       &lt;!--通用--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.12&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;junit&lt;/groupId&gt;            &lt;artifactId&gt;junit&lt;/artifactId&gt;            &lt;version&gt;4.13&lt;/version&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-nop --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;            &lt;artifactId&gt;slf4j-nop&lt;/artifactId&gt;            &lt;version&gt;1.7.25&lt;/version&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;!--文件上传--&gt;        &lt;dependency&gt;            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;            &lt;version&gt;1.3.3&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;1.3.2&lt;/version&gt;                &lt;configuration&gt;                    &lt;verbose&gt;true&lt;/verbose&gt;                    &lt;overwrite&gt;true&lt;/overwrite&gt;                &lt;/configuration&gt;                &lt;dependencies&gt;                    &lt;dependency&gt;                        &lt;groupId&gt;mysql&lt;/groupId&gt;                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                        &lt;version&gt;5.1.47&lt;/version&gt;                    &lt;/dependency&gt;                &lt;/dependencies&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;        &lt;resources&gt;            &lt;resource&gt;                &lt;directory&gt;src/main/java&lt;/directory&gt;                &lt;includes&gt;                    &lt;include&gt;**/*.properties&lt;/include&gt;                    &lt;include&gt;**/*.xml&lt;/include&gt;                &lt;/includes&gt;                &lt;filtering&gt;false&lt;/filtering&gt;            &lt;/resource&gt;            &lt;resource&gt;                &lt;directory&gt;src/main/resources&lt;/directory&gt;                &lt;includes&gt;                    &lt;include&gt;**/*.properties&lt;/include&gt;                    &lt;include&gt;**/*.xml&lt;/include&gt;                &lt;/includes&gt;                &lt;filtering&gt;false&lt;/filtering&gt;            &lt;/resource&gt;        &lt;/resources&gt;    &lt;/build&gt;&lt;/project&gt;</code></pre><p>build.gradle</p><pre><code class="gradle">dependencies {    testCompile group: &#39;junit&#39;, name: &#39;junit&#39;, version: &#39;4.11&#39;// https://mvnrepository.com/artifact/org.springframework/spring-webmvc    compile group: &#39;org.springframework&#39;, name: &#39;spring-webmvc&#39;, version: &#39;5.2.0.RELEASE&#39;    // https://mvnrepository.com/artifact/org.springframework/spring-aspects    compile group: &#39;org.springframework&#39;, name: &#39;spring-aspects&#39;, version: &#39;5.2.0.RELEASE&#39;    // https://mvnrepository.com/artifact/com.alibaba/fastjson    compile group: &#39;com.alibaba&#39;, name: &#39;fastjson&#39;, version: &#39;1.2.68&#39;// https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf    compile group: &#39;org.thymeleaf&#39;, name: &#39;thymeleaf&#39;, version: &#39;3.0.11.RELEASE&#39;// https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5    compile group: &#39;org.thymeleaf&#39;, name: &#39;thymeleaf-spring5&#39;, version: &#39;3.0.11.RELEASE&#39;// https://mvnrepository.com/artifact/org.springframework/spring-jdbc    compile group: &#39;org.springframework&#39;, name: &#39;spring-jdbc&#39;, version: &#39;5.2.0.RELEASE&#39;// https://mvnrepository.com/artifact/mysql/mysql-connector-java    compile group: &#39;mysql&#39;, name: &#39;mysql-connector-java&#39;, version: &#39;5.1.47&#39;    // https://mvnrepository.com/artifact/com.alibaba/druid    compile group: &#39;com.alibaba&#39;, name: &#39;druid&#39;, version: &#39;1.2.2&#39;    // https://mvnrepository.com/artifact/org.mybatis/mybatis    compile group: &#39;org.mybatis&#39;, name: &#39;mybatis&#39;, version: &#39;3.5.5&#39;// https://mvnrepository.com/artifact/org.mybatis/mybatis-spring    compile group: &#39;org.mybatis&#39;, name: &#39;mybatis-spring&#39;, version: &#39;2.0.5&#39;    // https://mvnrepository.com/artifact/org.slf4j/slf4j-nop    compile group: &#39;org.slf4j&#39;, name: &#39;slf4j-nop&#39;, version: &#39;1.7.25&#39; // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api    providedCompile group: &#39;javax.servlet&#39;, name: &#39;javax.servlet-api&#39;, version: &#39;4.0.1&#39;   }</code></pre><h3 id="2-applicationContext-xml"><a href="#2-applicationContext-xml" class="headerlink" title="2.applicationContext.xml"></a>2.applicationContext.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop         https://www.springframework.org/schema/aop/spring-aop.xsd         http://www.springframework.org/schema/tx         http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;    &lt;context:annotation-config/&gt;    &lt;context:component-scan base-package=&quot;org.example.bean&quot;/&gt;    &lt;context:component-scan base-package=&quot;org.example.aspect&quot;/&gt;    &lt;context:component-scan base-package=&quot;org.example.service&quot;/&gt;    &lt;context:component-scan base-package=&quot;org.example.dao&quot;/&gt;    &lt;!--配置数据源--&gt;    &lt;context:property-placeholder location=&quot;classpath:database-config.properties&quot;/&gt;    &lt;bean id=&quot;myDataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driver}&quot;/&gt;        &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&gt;        &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&gt;           &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&gt;        &lt;!-- 配置初始化大小、最小、最大 --&gt;        &lt;property name=&quot;initialSize&quot; value=&quot;5&quot; /&gt;        &lt;property name=&quot;minIdle&quot; value=&quot;10&quot; /&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt;        &lt;!-- 配置获取连接等待超时的时间 --&gt;        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt;    &lt;/bean&gt;    &lt;!--SqlSessionFactory 会话工厂交给spring容器管理--&gt;    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot;/&gt;        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 配置Mapper接口的扫描器--&gt;    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;        &lt;!--注入会话工厂--&gt;        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;        &lt;!--配置mapper接口所在包--&gt;        &lt;property name=&quot;basePackage&quot; value=&quot;org.example.dao&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 配置jdbc的事务管理器 --&gt;    &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!-- 开启自动代理，使@AspectJ生效--&gt;    &lt;aop:aspectj-autoproxy/&gt;    &lt;!-- 启用注解事务 --&gt;    &lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;/&gt;&lt;/beans&gt;</code></pre><h3 id="3-database-config-properties"><a href="#3-database-config-properties" class="headerlink" title="3. database-config.properties"></a>3. database-config.properties</h3><pre><code class="properties">jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/mybatistest?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghaijdbc.username=rootjdbc.password=123456</code></pre><h3 id="4-mybatis-config-xml"><a href="#4-mybatis-config-xml" class="headerlink" title="4. mybatis-config.xml"></a>4. mybatis-config.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;settings&gt;&lt;!--设置mybatis输出日志--&gt;        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;    &lt;/settings&gt;    &lt;mappers&gt;&lt;!--所有的sql映射文件--&gt;        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h3 id="5-springmvc-servlet-xml"><a href="#5-springmvc-servlet-xml" class="headerlink" title="5. springmvc-servlet.xml"></a>5. springmvc-servlet.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        https://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;org.example.controller&quot;/&gt;    &lt;!--    使springmvc注解生效--&gt;    &lt;mvc:annotation-driven &gt;        &lt;mvc:message-converters&gt;&lt;!--            使JSON格式类型接受任意形式的Java类型对象--&gt;            &lt;bean id=&quot;fastjson&quot; class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;&gt;                &lt;property name=&quot;supportedMediaTypes&quot;&gt;                    &lt;list&gt;                        &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;                        &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;                    &lt;/list&gt;                &lt;/property&gt;            &lt;/bean&gt;        &lt;/mvc:message-converters&gt;    &lt;/mvc:annotation-driven&gt;    &lt;!-- 静态资源过滤映射 --&gt;    &lt;mvc:default-servlet-handler/&gt;&lt;!--    处理器映射器--&gt;    &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;&lt;!--处理器适配器--&gt;    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;    &lt;!-- 试图解析器  thymeleaf --&gt;    &lt;bean  id=&quot;templateResolver&quot; class=&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;&gt;        &lt;!-- 映射页面位置 --&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot; /&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.html&quot; /&gt;        &lt;property name=&quot;templateMode&quot; value=&quot;HTML&quot; /&gt;        &lt;property name=&quot;cacheable&quot; value=&quot;false&quot; /&gt;        &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot;/&gt;&lt;!--不加会乱码--&gt;    &lt;/bean&gt;    &lt;bean id=&quot;templateEngine&quot;          class=&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;&gt;        &lt;property name=&quot;templateResolver&quot; ref=&quot;templateResolver&quot; /&gt;    &lt;/bean&gt;    &lt;bean class=&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;&gt;        &lt;property name=&quot;templateEngine&quot; ref=&quot;templateEngine&quot; /&gt;        &lt;!--解决中文乱码--&gt;        &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h3 id="6-web-xml"><a href="#6-web-xml" class="headerlink" title="6. web.xml"></a>6. web.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;         version=&quot;4.0&quot;&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener        &lt;/listener-class&gt;    &lt;/listener&gt;    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;app&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;/WEB-INF/springmvc-servlet.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;&lt;!--    /  匹配所有的请求，（不包括.jsp）--&gt;&lt;!--    /*  匹配所有的请求，（包括.jsp）--&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;app&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;filter&gt;        &lt;filter-name&gt;encoding&lt;/filter-name&gt;        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;encoding&lt;/param-name&gt;            &lt;param-value&gt;utf-8&lt;/param-value&gt;        &lt;/init-param&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;encoding&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;&lt;/web-app&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM复习</title>
      <link href="2020/05/20/SSM%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0/"/>
      <url>2020/05/20/SSM%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM复习"><a href="#SSM复习" class="headerlink" title="SSM复习"></a>SSM复习</h1><h2 id="Spring基础学习"><a href="#Spring基础学习" class="headerlink" title="Spring基础学习"></a>Spring基础学习</h2><p><img src="../../../../images/spring-overview.png" alt="spring-overview"></p><blockquote><p>Spring简化Java EE开发</p></blockquote><ul><li>核心容器：<ul><li>Spring-core : Ioc 、 DI</li><li>Spring-beans：BeanFactoy</li><li>Spring-context : 建立在core和beans模块上，ApplicationContext</li><li>Spring-expression：Spring的EL表达式</li><li>Spring-context-support：支持整合第三方库到spring应用程序上下文</li></ul></li><li>AOP 和 Instrumentation<ul><li>Spring-aop: 提供一个符合AOP要求的面向切面编程实现</li><li>Spring-aspects: 提供了与AspectJ 的集成功能</li><li>Spring-instrument：提供了类植入支持和类加载器的实现</li></ul></li><li>消息<ul><li>Spring-messaging : 提供了对消息传递体系结构和协议的支持</li></ul></li><li>数据访问/集成<ul><li>Spring-jdbc：提供了JDBC的抽象层</li><li>Spring-orm：为流行的对象关系映射API提供集成层</li><li>Spring-tx（事务模块）：支持用于实现特殊接口和所有POJO类的编程和声明式事务管理</li></ul></li><li>Web<ul><li>Spring-web：提供了基本的web开发集成功能</li><li>Spring-webmvc:如SpringMVC</li><li>Spring-websocket：提供了WebSocket和SockJS</li></ul></li><li>测试<ul><li>Spring-test：使用Junit对Spring组件进行单元测试和集成测试</li></ul></li></ul><h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><blockquote><p>实现IoC容器方法：BeanFactory 和 ApplicationContext</p></blockquote><p>ApplicationContext有三种实现ClassPathXmlApplicationContext、FileSystemXmlApplicationContext、Web服务器实例化ApplicationContext容器</p><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><blockquote><p>注入方式</p></blockquote><ol><li>构造方法注入</li><li>使用属性setter方法注入</li></ol><h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><blockquote><p>Bean 的配置</p></blockquote><p>Spring可以看作一个大型工厂，用于生产和管理Spring容器中的Bean</p><p>Bean的实例化：</p><ul><li>构造方法实例化（最为常用）</li><li>静态工厂实例化</li><li>实例工厂实例化</li></ul><blockquote><p>Bean 的作用域</p></blockquote><p>singleton(默认)、prototype、（request、session、application、websocket ）（后四种到Web Spring应用程序上下文中使用）</p><p>Spring容器能够对singleton作用域的Bean的生命周期进行一个跟踪：实例化-&gt;初始化-&gt;销毁，程序员可在次期间实现接口进行操作</p><p>Spring容器不会对prototype作用域的Bean的生命周期进行跟踪</p><blockquote><p>Bean 的装配方式</p></blockquote><ol><li>XML配置文件装配</li><li>注解的方式装配<ul><li>@Component (注解普通的bean对象)</li><li>@Repository (注解dao层)</li><li>@Service (注解service层)</li><li>@Controller (注解控制层)</li><li>@Autowired (默认按照Bean的类型进行装配)</li><li>@Resource (默认按照Bean的名称进行装配)</li><li>@Qualifer (当@Autowired需要使用名称指定时是使用它)</li></ul></li></ol><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP(Aspect-Oriented Programming),它与OOP相辅相成，OOP中是以类作为程序的基本单元，而AOP中的基本单元是Aspect(切面)。可以在日志记录、性能检测、安全控制、事务处理、异常处理中使用</p><blockquote><p>常用术语：</p></blockquote><ul><li>切面(Aspect)：指封装横切到系统功能的类</li><li>连接点(Joinpoint)：指程序运行中的一些时间点，就是一个类的方法都可以作为连接点</li><li>切入点(Pointcut)：指需要处理的连接点</li><li>通知(Advice)：指切面上添加到特定的连接点的一段代码，通知的方式有多种</li><li>引入(Inroduction)：允许在现在的实现类中添加自定义的方法和属性</li><li>目标对象(Target Object)：是指所有被通知(加强)的对象</li><li>代理(Proxy)：是通知应用到目标对象之后被动态创建的对象</li><li>织入(weaving)：是将目标代码插入到目标对象上，从而生成代理对象的过程。</li></ul><blockquote><p>JDK 动态代理</p></blockquote><p>由java.lang.reflect.*包提供的方式，它必须借助一个接口才能产生代理对象，对于使用业务接口的类，Spring默认采用JDK动态代理实现AOP</p><blockquote><p>CGLIB 动态代理</p></blockquote><p>对于没有提供接口的类，只能采用CGLIB动态代理，对指定的目标类生成一个子类，并对子类进行增强，在Spring-core包中已经集成了CGLIB所需要的jar包</p><blockquote><p>通知类型</p></blockquote><ol><li><p>环绕通知</p><p>在目标方法执行前和执行后实施增强，可应用于日志记录、事务处理功能</p></li><li><p>前置通知</p><p>在目标方法执行前实施增强，可应用于权限管理功能</p></li><li><p>后置返回通知</p><p>在目标方法成功执行后实施增强，可应用于关闭流、删除临时文件等功能</p></li><li><p>后置(最终)通知</p><p>在目标方法执行后实施增强，与后置返回通知不同的是，不管异常都会执行，应用于释放资源</p></li><li><p>异常通知</p><p>方法抛出异常后实施增强，可应用于处理异常、记录日志等功能</p></li><li><p>引入通知</p><p>在目标类中添加一些新的方法和属性，可应用于目标类(增强类)</p></li></ol><p><img src="../../../../images/Snipaste_2020-05-19_11-08-16.png" alt="Snipaste_2020-05-19_11-08-16"></p><blockquote><p>基于XML 配置开发AspectJ</p></blockquote><p>AspectJ是一个基于Java语言的AOP框架，AspectJ 实现SpringAOP的方式有两种：一种是基于XML配置开发AspectJ ，二是基于注解开发AspectJ</p><p><img src="../../../../images/aspectXMl.png" alt="aspectXMl"></p><p>定义切面类</p><pre><code class="java">package aspect;public class MyAspect{    // 前置通知    public void before(JoinPoint jp){        System.out.print(&quot;前置通知，模拟权限控制&quot;);        System.out.println(&quot;,目标对象：&quot;+jp.getTarget()                          + &quot;,被增强处理的方法：&quot;+jp.getSignature().getName());    }    // 后置返回通知    public void afterReturning(JoinPoint jp){        System.out.print(&quot;后置返回通知：&quot;+&quot;模拟删除临时文件&quot;);        System.out.println(&quot;,被增强的方法：&quot;+jp.getSignature().getName());    }    // 环绕通知    public Object around(ProceedingJoinPoint pjp) throws Throwable{        // 开始        System.out.println(&quot;环绕开始：执行目标方法前，模拟开始事务&quot;);        // 执行当前目标方法        Object obj = pjp.proceed();        // 结束        System.out.println(&quot;环绕结束：执行目标方法后，模拟关闭事务&quot;);        return obj    }    // 异常通知    public void except(Throwable e){        System.out.println(&quot;异常通知：&quot;+&quot;程序执行异常&quot;+e.getMessage());    }    // 后置（最终）通知    public void after(){        System.out.println(&quot;最终通知：模拟释放资源&quot;);    }}</code></pre><p>applicationContext.xml中配置</p><pre><code class="xml">&lt;!-- 定义切面--&gt;&lt;bean id=&quot;myAspect&quot; class=&quot;aspect.MyAspect&quot;&gt;&lt;/bean&gt;&lt;!-- 配置切面--&gt;&lt;aop:config&gt;    &lt;aop:aspect ref=&quot;myAspect&quot;&gt;        &lt;!-- 配置切入点，通知增强哪些方法--&gt;        &lt;aop:pointcut expression=&quot;execution (* service.*.*(..))&quot; id=&quot;myPointCut&quot;&gt;&lt;/aop:pointcut&gt;        &lt;!-- 将通知与切入点关联--&gt;        &lt;!-- 关联前置通知--&gt;        &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;myPointCut&quot;&gt;&lt;/aop:before&gt;        &lt;!-- 关联后置返回通知，在目标方法成功执行后执行--&gt;        &lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;myPointCut&quot;&gt;&lt;/aop:after-returning&gt;        &lt;!-- 关联环绕通知--&gt;        &lt;aop:around method=&quot;around&quot; pointcut-ref=&quot;myPointCut&quot;&gt;&lt;/aop:around&gt;        &lt;!-- 关联异常通知--&gt;        &lt;aop:after-throwing method=&quot;except&quot; pointcut-ref=&quot;myPointCut&quot; throwing=&quot;e&quot;&gt;&lt;/aop:after-throwing&gt;        &lt;!-- 关联后置（最终）通知--&gt;        &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;myPointCut&quot;&gt;&lt;/aop:after&gt;    &lt;/aop:aspect&gt;&lt;/aop:config&gt;</code></pre><blockquote><p>基于注解开发AspectJ</p></blockquote><p>创建一个切面类</p><pre><code class="java">package aspect;@Aspect@Componentpublic class MyAspect{    // 定义切入点    @Pointcut(&quot;execution(* service.*.*(..))&quot;)    private void myPointCut(){    }    // 前置通知    @Before(&quot;myPointCut()&quot;)    public void before(JoinPoint jp){        System.out.print(&quot;前置通知，模拟权限控制&quot;);        System.out.println(&quot;,目标对象：&quot;+jp.getTarget()                          + &quot;,被增强处理的方法：&quot;+jp.getSignature().getName());    }    // 后置返回通知    @AfterReturning(&quot;myPointCut()&quot;)    public void afterReturning(JoinPoint jp){        System.out.print(&quot;后置返回通知：&quot;+&quot;模拟删除临时文件&quot;);        System.out.println(&quot;,被增强的方法：&quot;+jp.getSignature().getName());    }    // 环绕通知    @Around(&quot;myPointCut()&quot;)    public Object around(ProceedingJoinPoint pjp) throws Throwable{        // 开始        System.out.println(&quot;环绕开始：执行目标方法前，模拟开始事务&quot;);        // 执行当前目标方法        Object obj = pjp.proceed();        // 结束        System.out.println(&quot;环绕结束：执行目标方法后，模拟关闭事务&quot;);        return obj    }    // 异常通知    @AfterThrowing(value=&quot;myPointCut()&quot;,throwing=&quot;e&quot;)    public void except(Throwable e){        System.out.println(&quot;异常通知：&quot;+&quot;程序执行异常&quot;+e.getMessage());    }    // 后置（最终）通知    @After(&quot;myPointCut&quot;)    public void after(){        System.out.println(&quot;最终通知：模拟释放资源&quot;);    }}</code></pre><p>applicationContext.xml中配置</p><pre><code class="xml">&lt;!--指定需要扫描的包，使注解生效--&gt;&lt;context:component-scan base-package=&quot;aspect&quot;&gt;&lt;/context:component-scan&gt;&lt;!--启动基于注解的AspectJ支持--&gt;&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></pre><h2 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h2><blockquote><p>事务的特性</p></blockquote><ol><li>原子性：一个事务是一个不可分割的工作单位，这个事务要么全部成功提交要么全部失败回滚</li><li>隔离性：一个事务在完成前对其他事务是不可见的</li><li>一致性：事务操作前后，异常的情况下数据表中的数据不会发生变化</li><li>持久性：一旦事务提交成功，对数据库数据的改变是永久的</li></ol><p>spring自带了jdbc的封装，如jdbcTemplate可以进行数据库的操作。spring框架所支持的事务管理，包括编程式事务管理和声明式事务管理。</p><blockquote><p>数据库编程，jdbcTemplate的使用</p></blockquote><ol><li>在applicationContext.xml中配置数据源</li></ol><pre><code class="xml">&lt;!-- 配置数据源 --&gt;&lt;bean id=&quot;datasource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;    &lt;!-- MySQL 数据库驱动 --&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;    &lt;!-- 连接数据库URL --&gt;    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&quot;&gt;&lt;/property&gt;    &lt;!-- 连接数据库的用户名 --&gt;    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;    &lt;!-- 连接数据库的密码 --&gt;    &lt;property name=&quot;password&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 配置JDBC模板 --&gt;&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><ol start="2"><li>在dao层的实现类中注入jdbcTemplate即可使用</li></ol><blockquote><p>编程式事务管理</p></blockquote><p>在代码中显示调用beginTransaction、commit、rollback等与事务处理相关的方法，称为编程式事务管理</p><ol><li>配置文件中添加事务管理器</li></ol><pre><code class="xml">&lt;!-- 为数据源添加事务管理器 --&gt;&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><ol start="2"><li>在dao层的实现类中添加注入txManager</li></ol><blockquote><p>声明式事务管理</p></blockquote><p>spring的声明式事务管理是通过AOP技术实现的事务管理，其本质是对方法前后进行拦截，然后再目标方法开始之前创建或者加入一个事务，在执行完成目标方法之后根据执行情况提交或者回滚事务</p><p>有两种方式实现：1.xml配置，2.注解的方式</p><ol><li>xml配置的方式</li></ol><pre><code class="xml">&lt;!-- 为数据源添加事务管理器 --&gt;&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!--编写通知声明事务--&gt;&lt;tx:advice id=&quot;myAdvice&quot; transaction-manager=&quot;txManager&quot;&gt;    &lt;tx:attributes&gt;        &lt;!--*表示任意方法--&gt;        &lt;tx:method name=&quot;*&quot;&gt;&lt;/tx:method&gt;    &lt;/tx:attributes&gt;&lt;/tx:advice&gt;&lt;!--编写AOP，让spring自动对目标对象生成处理，需要使用AspectJ的表达式--&gt;&lt;aop:config&gt;        &lt;!--定义切入点--&gt;    &lt;aop:pointcut expression=&quot;execution(* service.*.*())&quot; id=&quot;txPointCut&quot;&lt;/aop:pointcut&gt;        &lt;!--切面：将切入点与通知关联--&gt;    &lt;aop:advisor advice-ref=&quot;myAdvice&quot; pointcut-ref=&quot;txPointCut&quot;&gt;&lt;/aop:advisor&gt;&lt;/aop:config&gt;</code></pre><ol start="2"><li>基于注解@Transactional</li></ol><ul><li>在配置文件中添加如下</li></ul><pre><code class="xml">&lt;!-- 为数据源添加事务管理器 --&gt;&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 为事务管理器注册驱动器 --&gt;&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;/&gt;</code></pre><ul><li>为service包下的方法添加@Transactional</li></ul><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>一个ORM框架</p><p><img src="../../../../images/Snipaste_2020-05-19_17-00-19.png" alt="Snipaste_2020-05-19_17-00-19"></p><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><ol><li>配置mybatis-config.xml</li></ol><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot; /&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&quot; /&gt;                &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;                &lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;dao/StudentMapper.xml&quot; /&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><ol start="2"><li>编写mapper.xml文件</li></ol><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;dao.StudentMapper&quot;&gt;    &lt;!-- 增加一个学生 --&gt;    &lt;insert id=&quot;addStudent&quot; parameterType=&quot;pojo.Student&quot;&gt;        insert into student(id,name,password) values(#{id},#{name},#{password})    &lt;/insert&gt;    &lt;!-- 删除一个学生信息 --&gt;    &lt;delete id=&quot;deleteStudentById&quot; parameterType=&quot;Integer&quot;&gt;        delete from student where id = #{id}    &lt;/delete&gt;    &lt;!-- 修改学生信息 --&gt;    &lt;update id=&quot;updateStudent&quot; parameterType=&quot;pojo.Student&quot;&gt;        update student set name = #{name}, password = #{password} where id = #{id}    &lt;/update&gt;    &lt;!-- 查询所有学生信息 --&gt;    &lt;select id=&quot;selectAllStudent&quot; resultType=&quot;pojo.Student&quot;&gt;        select * from student    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h3 id="整合spring与mybatis"><a href="#整合spring与mybatis" class="headerlink" title="整合spring与mybatis"></a>整合spring与mybatis</h3><ol><li><p>spring中添加sqlSessionFactory工厂</p><pre><code class="xml">&lt;!-- 配置数据源 --&gt;&lt;bean id=&quot;datasource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;    &lt;!-- MySQL 数据库驱动 --&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;    &lt;!-- 连接数据库URL --&gt;    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&quot;&gt;&lt;/property&gt;    &lt;!-- 连接数据库的用户名 --&gt;    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;    &lt;!-- 连接数据库的密码 --&gt;    &lt;property name=&quot;password&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;    &lt;!-- 最大连接数 --&gt;    &lt;property name=&quot;maxTotal&quot; value=&quot;30&quot;&gt;&lt;/property&gt;    &lt;!-- 最大空闲连接数 --&gt;    &lt;property name=&quot;maxIdle&quot; value=&quot;10&quot;&gt;&lt;/property&gt;    &lt;!-- 初始化连接数 --&gt;    &lt;property name=&quot;initialSize&quot; value=&quot;5&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 为数据源添加事务管理器 --&gt;&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 为事务管理器注册驱动器 --&gt;&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;/&gt;&lt;!-- 配置MyBatis工厂，同时指定数据源，并于MyBatis完美配合 --&gt;&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;&gt;&lt;/property&gt;    &lt;!-- configLocation的属性值为MyBatis的核心配置文件 --&gt;    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 使用Mapper代理开发，使用spring自动扫描MyBatis的接口并装配,dao层使用@Mapper --&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;    &lt;property name=&quot;basePackage&quot; value=&quot;dao&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><ol start="2"><li>配置全局mybatis</li></ol><pre><code class="xml">&lt;configuration&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;mapper/StudentMapper.xml&quot; /&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre></li></ol><h3 id="mybatis的映射器"><a href="#mybatis的映射器" class="headerlink" title="mybatis的映射器"></a>mybatis的映射器</h3><p>核心配置文件属性</p><p><img src="../../../../images/Snipaste_2020-05-19_17-19-41.png" alt="Snipaste_2020-05-19_17-19-41"></p><p>映射器</p><p><img src="../../../../images/Snipaste_2020-05-19_17-21-35.png" alt="Snipaste_2020-05-19_17-21-35"></p><blockquote><p>insert 主键回调</p></blockquote><pre><code class="xml">&lt;!--添加一个用户，成功后将主键值填给uid(pojo类的属性)--&gt;&lt;insert id=&quot;insertStudent1&quot; parameterType=&quot;pojo.Student&quot; keyProperty=&quot;uid&quot; useGeneratedKeys=&quot;true&quot;&gt;insert into student(name,password) values(#{name},#{password})&lt;/insert&gt;</code></pre><blockquote><p>自定义主键</p></blockquote><pre><code class="xml">&lt;insert id=&quot;insertStudent2&quot; parameterType=&quot;pojo.Student&quot; &gt;&lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;Integer&quot; order=&quot;BEFORE&quot;&gt;select if(max(id) is null, 1, max(id)+1) as newid  from user&lt;/selectKey&gt;insert into student(id,name,password) values(#{id},#{name},#{password})&lt;/insert&gt;</code></pre><blockquote><p>sql </p></blockquote><pre><code class="xml">&lt;sql id=&quot;comColumns&quot;&gt;id,uname,usex&lt;/sql&gt;&lt;select id=&quot;selectUser&quot; resultType=&quot;pojo.MyUser&quot;&gt;    select &lt;include refid=&quot;comColumns&quot;&gt;&lt;/include&gt; from user&lt;/select&gt;</code></pre><blockquote><p>resultMap</p></blockquote><pre><code class="xml"> &lt;resultMap type=&quot;pojo.User&quot; id=&quot;user&quot;&gt;     &lt;id property=&quot;uid&quot; column=&quot;id&quot;/&gt;     &lt;result property=&quot;uname&quot; column=&quot;name&quot;/&gt;     &lt;result property=&quot;usex&quot; column=&quot;sex&quot;/&gt; &lt;/resultMap&gt;</code></pre><h3 id="联级查询"><a href="#联级查询" class="headerlink" title="联级查询"></a>联级查询</h3><ol><li>开启懒加载mybatis-config.xml中</li></ol><pre><code class="xml">&lt;!-- 在使用MyBatis嵌套查询方式进行关联查询时，使用MyBatis的延时加载在一定程度可以提高查询效率 --&gt;&lt;settings&gt;&lt;!-- 打开延时加载的开关 --&gt;&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;&lt;!-- 将积极加载改为按需加载 --&gt;&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;&lt;/settings&gt;</code></pre><blockquote><p>一对一查询</p></blockquote><ul><li>嵌套查询（执行两个SQL语句）</li></ul><pre><code class="xml">&lt;resultMap type=&quot;com.pojo.Person&quot; id=&quot;cardAndPerson1&quot;&gt;    &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;    &lt;result property=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/result&gt;    &lt;result property=&quot;age&quot; column=&quot;age&quot;&gt;&lt;/result&gt;    &lt;association property=&quot;card&quot; column=&quot;idcard_id&quot; javaType=&quot;com.pojo.Idcard&quot; select=&quot;com.dao.IdCardDao.selectCodeById&quot;&gt;&lt;/association&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectPersonById1&quot; parameterType=&quot;Integer&quot; resultMap=&quot;cardAndPerson1&quot;&gt;&lt;/select&gt;</code></pre><ul><li>sql语句连接查询</li></ul><pre><code class="xml">&lt;resultMap type=&quot;com.pojo.Person&quot; id=&quot;cardAndPerson2&quot;&gt;    &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;    &lt;result property=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/result&gt;    &lt;result property=&quot;age&quot; column=&quot;age&quot;&gt;&lt;/result&gt;    &lt;association property=&quot;card&quot; javaType=&quot;com.pojo.Idcard&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;idcard_id&quot;&gt;&lt;/id&gt;        &lt;result property=&quot;code&quot; column=&quot;code&quot;&gt;&lt;/result&gt;    &lt;/association&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectPersonById2&quot; parameterType=&quot;Integer&quot;&gt;    select p.*,ic.code     from person p, idcard ic    where p.idcard_id = ic.id and p.id = #{id}&lt;/select&gt;</code></pre><ul><li>创建一个新的对象类来存储连接查询的结果</li></ul><blockquote><p>一对多查询</p></blockquote><ul><li>嵌套查询</li></ul><pre><code class="xml">&lt;resultMap type=&quot;com.pojo.MyUser&quot; id=&quot;userAndOrder1&quot;&gt;    &lt;id property=&quot;uid&quot; column=&quot;uid&quot;&gt;&lt;/id&gt;    &lt;result property=&quot;uname&quot; column=&quot;uname&quot;&gt;&lt;/result&gt;    &lt;result property=&quot;usex&quot; column=&quot;usex&quot;&gt;&lt;/result&gt;    &lt;collection property=&quot;orderList&quot; ofType=&quot;com.pojo.Orders&quot; column=&quot;uid&quot; select=&quot;com.dao.OrdersDao.selectOrdersById&quot;&gt;    &lt;/collection&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectUserDaoOrdersById1&quot; parameterType=&quot;Integer&quot; resultMap=&quot;userAndOrders1&quot;&gt;    select * from user where uid=#{id}&lt;/select&gt;</code></pre><ul><li>连接查询</li></ul><pre><code class="xml">&lt;resultMap type=&quot;com.pojo.MyUser&quot; id=&quot;userAndOrder1&quot;&gt;    &lt;id property=&quot;uid&quot; column=&quot;uid&quot;&gt;&lt;/id&gt;    &lt;result property=&quot;uname&quot; column=&quot;uname&quot;&gt;&lt;/result&gt;    &lt;result property=&quot;usex&quot; column=&quot;usex&quot;&gt;&lt;/result&gt;    &lt;collection property=&quot;orderList&quot; ofType=&quot;com.pojo.Orders&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;        &lt;result property=&quot;ordersn&quot; column=&quot;ordersn&quot;&gt;&lt;/result&gt;    &lt;/collection&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectUserOrdersById2&quot; paramterType=&quot;Integer&quot; resultMap=&quot;userAndOrders2&quot;&gt;    select u.*,o.id,o.ordersn from     user u,orders o     where u.uid=o.user_id and u.uid=#{id}&lt;/select&gt;</code></pre><ul><li>创建一个新的对象类来存储连接查询的结果</li></ul><blockquote><p>多对多查询</p></blockquote><p>实质是两个一对多，制造一个中间表</p><ul><li>连接查询</li></ul><pre><code class="xml">&lt;resultMap type=&quot;com.pojo.Orders&quot; id=&quot;allOrdersAndProducts&quot;&gt;    &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;    &lt;result property=&quot;ordersn&quot; column=&quot;ordersn&quot;&gt;&lt;/result&gt;    &lt;collection property=&quot;products&quot; ofType=&quot;com.pojo.Product&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;pid&quot;&gt;&lt;/id&gt;        &lt;result property=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/result&gt;        &lt;result property=&quot;price&quot; column=&quot;price&quot;&gt;&lt;/result&gt;    &lt;/collection&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectAllOrdersAndProducts&quot; resultMap=&quot;allOrdersAndProducts&quot;&gt;    select o.*,p.id as pid,p.name,p.price     from orders o,orders_detail od,product p    where od.orders_id = o.id    and od.product_id = p.id&lt;/select&gt;</code></pre><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><blockquote><p><code>&lt;if&gt;</code>元素</p></blockquote><pre><code class="xml">&lt;select id=&quot;selectUserByIf&quot; resultType=&quot;com.pojo.MyUser&quot; parameterType=&quot;com.pojo.MyUser&quot;&gt;    select * from user where 1=1    &lt;if test=&quot;uname!=null and uname!=&#39;&#39;&quot;&gt;        and uname like concat(&#39;%&#39;,#{uname},&#39;%&#39;)    &lt;/if&gt;    &lt;if test=&quot;usex!=null and usex!=&#39;&#39;&quot;&gt;        and usex=#{usex}    &lt;/if&gt;&lt;/select&gt;</code></pre><blockquote><p><code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>、<code>&lt;otherwise&gt;</code>元素</p></blockquote><pre><code class="xml">&lt;select id=&quot;selectUserByChoose&quot; resultType=&quot;com.pojo.MyUser&quot; parameterType=&quot;com.pojo.MyUser&quot;&gt;    select * from user where 1=1     &lt;choose&gt;        &lt;when test=&quot;uname!=null and uname!=&#39;&#39;&quot;&gt;            and uname like concat(&#39;%&#39;,#{uname},&#39;%&#39;)        &lt;/when&gt;        &lt;when test=&quot;usex!=null and usex!=&#39;&#39;&quot;&gt;            and usex = #{usex}        &lt;/when&gt;        &lt;otherwise&gt;            and uid &gt; 10        &lt;/otherwise&gt;    &lt;/choose&gt;&lt;/select&gt;</code></pre><blockquote><p><code>&lt;trim&gt;</code>元素</p></blockquote><p>可以在内容前加前缀prefix或后缀suffix,可以把包含了的首部忽略prefixOverrides或尾部内容覆盖suffixOverrides</p><pre><code class="xml">&lt;select id=&quot;selectUserByTrim&quot; resultType=&quot;com.pojo.MyUser&quot; parameterType=&quot;com.pojo.MyUser&quot;&gt;    select * from user    &lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and | or&quot;&gt;        &lt;if test=&quot;uname!=null and uname!=&#39;&#39;&quot;&gt;            and uname like concat(&#39;%&#39;,#{uname},&#39;%&#39;)        &lt;/if&gt;        &lt;if test=&quot;usex!=null and usex!=&#39;&#39;&quot;&gt;            and usex#{usex}        &lt;/if&gt;    &lt;/trim&gt;&lt;/select&gt;</code></pre><blockquote><p><code>&lt;where&gt;</code>元素</p></blockquote><p>就是增加一个where,被包含的内容有时添加，没有的时候不添加</p><blockquote><p><code>&lt;set&gt;</code>元素</p></blockquote><pre><code class="xml">&lt;update id=&quot;updateUserBySet&quot; parameterType=&quot;com.pojo.MyUser&quot;&gt;    update user    &lt;set&gt;        &lt;if test=&quot;uname!=null&quot;&gt; uname = #{uname},&lt;/if&gt;        &lt;if test=&quot;usex!=null&quot;&gt; usex = #{usex}&lt;/if&gt;    &lt;/set&gt;    where uid = #{uid}&lt;/update&gt;</code></pre><blockquote><p><code>&lt;foreach&gt;</code>元素</p></blockquote><pre><code class="xml">&lt;select id=&quot;selectUserByForeach&quot; resultType=&quot;com.pojo.MyUser&quot; parameterType=&quot;List&quot;&gt;    select * from user where uid in     &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;        #{item}    &lt;/foreach&gt;&lt;/select&gt;</code></pre><blockquote><p><code>&lt;bind&gt;</code>元素,解决不同数据库拼接符号不同的问题</p></blockquote><pre><code class="xml">&lt;select id=&quot;selectUserByBind&quot; resultType=&quot;com.pojo.MyUser&quot; parameterType=&quot;com.pojo.MyUser&quot;&gt;    &lt;bind name=&quot;param_uname&quot; value=&quot;&#39;%&#39;+uname+&#39;%&#39;&quot;&gt;&lt;/bind&gt;    select * from user where like #{param_uname}&lt;/select&gt;</code></pre><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>MVC是Model、View和Controller缩写代表Web程序中的3种职责</p><ul><li>模型：用于存储数据以及处理用户请求的业务逻辑</li><li>视图：向控制器提交数据，显示模型中的数据</li><li>控制器：根据视图提出的请求判断和数据交给那个模型处理，将处理后的有关结果交给那个视图更新显示</li></ul><blockquote><p>Spring MVC工作原理</p></blockquote><ol><li>客户端请求提交到DispatcherServlet</li><li>由DispatcherServlet控制器寻找一个或多个HandlerMapping，找到处理请求的Controller</li><li>DispatcherServlet将请求提交给Controller</li><li>Controller调用业务逻辑处理后返回ModelAndView</li><li>DispatherServlet寻找一个或多个ViewResolver视图解析器，找到ModelAndView指定的视图</li><li>视图负责将结果显示给客户端<img src="../../../../images/Snipaste_2020-05-19_21-19-10.png" alt="Snipaste_2020-05-19_21-19-10"></li></ol><blockquote><p>常用注解</p></blockquote><p>@Controller 注解为控制器返回页面 ， @RestController所有方法返回json数据</p><p>@RequestMapping 注解请求url与请求方式，还有@GetMapping</p><p>@ResponseBody 注解在方法上，指定返回json数据</p><p>@ModelAttribute 将方法参数中的数据直接存在Model中，被它注释的方法最先执行</p><p>@PathVariable  RestFul风格用到，注解到方法参数上，得到url中{}的值</p><p>@RequestParam 接受参数，请求参数必须与被请求参数一致</p><blockquote><p>重定向与转发</p></blockquote><p>重定向是将用户从当前处理请求定向到另一个视图或者处理请求，以前的请求(request)中存放的信息全部失效，并进入一个新的request作用域；（”redirect:/index”）</p><p>转发是将用户对当前处理的请求转发给另一个视图或处理请求，以前的request中存放的信息不会失效。（”forward:/index”）</p><p>转发是服务器行为，重定向是客户端行为。</p><h3 id="类型转换和格式化"><a href="#类型转换和格式化" class="headerlink" title="类型转换和格式化"></a>类型转换和格式化</h3><p>在Spring MVC框架中需要收集用户请求参数，并将请求参数传递给应用的控制器组件，此时存在一个问题，即所有的请求参数类型只能是字符数据类型，但Java是强类型语言，所有Spring MVC框架必须即将这些字符串请求参数转换成相应的数据类型</p><blockquote><p>Converter</p></blockquote><p>Converter&lt;S,T&gt;是一个可以将数据类型转换成另一种数据类型的接口，S表示源类型，T表示目标类型</p><ol><li>实现接口</li></ol><pre><code class="java">package converterpublic class GoodsConverter implements Converter&lt;String,GoodsModel&gt;{    @Override    public GoodsModel convert(String source){        // 创建一个Goods实例        GoodsModel goods = new GoodsModel();        // 以 “,”分隔        String stringValues [] = source.split(&quot;,&quot;);        if(stringValues!=null&amp;&amp;stringValues.length==3){            // 为Goods实例赋值            goods.setGoodsname(stringValues[0]);            goods.setGoodsprice(Double.parseDouble(stringValues[1]));            goods.setGoodsnumber(Integer.parseInt(stringValues[2]));            return goods;        }else{            throw new IllegalArgumentException(String.format(&quot;类型转换失败，需要格式&#39;apple,10.58,200&#39;,但格式是[%s]&quot;,source));        }    }}</code></pre><ol start="2"><li>springmvc-servlet.xml种注册</li></ol><pre><code class="xml">&lt;!--注册类型转换器GoodsConverter--&gt;&lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;    &lt;property name=&quot;converters&quot;&gt;        &lt;list&gt;            &lt;bean class=&quot;converter.GoodsConverter&quot;&gt;&lt;/bean&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;&gt;&lt;/mvc:annotation-driven&gt;</code></pre><blockquote><p>Formatter</p></blockquote><p>SpringMVC框架的Formatter<T>也是一个可以将数据类型转换成另一数据类型的接口，但是源数据类型必须是String类型</T></p><ol><li>实现接口</li></ol><pre><code class="java">package formatter;public class MyFormatter implements Formatter&lt;Date&gt;{    SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);    @Override    public String print(Date object,Locale arg1){        return dateFormat.format(object);    }    @Override    public Date parse(String source,Locale arg1)throws ParseException{        return dateFormat.parse(&quot;source&quot;); // Formatter只能对字符串转换    }}</code></pre><ol start="2"><li>注册</li></ol><pre><code class="xml">&lt;!--注册MyFormatter--&gt;&lt;bean id=&quot;conversionService&quot;     class=&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;&gt;    &lt;property name=&quot;formatters&quot;&gt;        &lt;set&gt;            &lt;bean class=&quot;formatter.MyFormatter&quot;        &lt;/set&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;&gt;&lt;/mvc:annotation-driven&gt;</code></pre><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>数据绑定是将用户参数输入值绑定到领域模型的一种特性，在Spring MVC的Controller和View参数数据传递种所有HTTP请求参数的类型均为字符串，如果模型需要绑定的类型为double或int,则需要手动进行类型转换，而有了数据绑定后就不需要手动将HTTP请求种的String类型转换为模型需要的类型。数据绑定的另一个好处是当输入验证失败时会重新生成一个HTML表单，无需重新填写输入字段</p><blockquote><p>含义</p></blockquote><ul><li>绑定请求参数输入值到领域模型</li><li>模型数据到视图的绑定（输入验证失败时）</li><li>模型数据到表单元素的绑定（如下拉列表选项值由控制器初始化）</li></ul><blockquote><p>Json数据交互</p></blockquote><p>JSON（JavaScript Object Notation）是一种轻量级的数据交互格式，有两种数据结构</p><ol><li>对象结构</li></ol><p>对象结构以”{“开始、以”}”结束，中间部分由0个或多个以英文”,”分隔的key/value对构成，key和value只之间以英文”:”分隔。其中key必须为String类型，value可以是String,Number,Object,Array等数据类型</p><ol start="2"><li>数组结构</li></ol><p>数组结构以”[“开始、以”]”结束，中间部分由0个或多个以英文”,”分隔的值的列表组成</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>Spring MVC的拦截器(Inteceptor)与Java Servlet的过滤器(Filter)类似，它主要用于拦截用户的请求并做出相应的处理，通常应用于权限验证、记录请求信息的日志、判断用户是否登录等功能上</p><blockquote><p>登录拦截器</p></blockquote><ol><li>实现接口</li></ol><pre><code class="java">package interceptor;public class AdminInterceptor implements HandlerInterceptor {    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception {        HandlerInterceptor.super.afterCompletion(request, response, handler, ex);    }    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,            ModelAndView modelAndView) throws Exception {        HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);    }    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {        HttpSession session = request.getSession();        Object adminObject = session.getAttribute(&quot;author&quot;);        if(adminObject == null || &quot;&quot;.equals(adminObject)) {            request.setAttribute(&quot;msg&quot;, &quot;您还未登录&quot;);            request.getRequestDispatcher(&quot;/WEB-INF/jsp/login.jsp&quot;).forward(request, response);            return false;        }else {            if(&quot;admin&quot;.equals(adminObject)) {                return true;            }else {                request.setAttribute(&quot;msg&quot;, &quot;您不是admin&quot;);                request.getRequestDispatcher(&quot;/WEB-INF/jsp/main.jsp&quot;).forward(request, response);                return false;            }        }            }}</code></pre><ol start="2"><li>注册</li></ol><pre><code class="java">&lt;mvc:interceptors&gt;        &lt;mvc:interceptor&gt;            &lt;!--拦截的路径--&gt;            &lt;mvc:mapping path=&quot;/fun1&quot; /&gt;            &lt;bean class=&quot;interceptor.AdminInterceptor&quot;/&gt;        &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt;</code></pre><h3 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><p>数据验证分为客服端验证和服务器验证，客户端验证主要是过滤正常用户的误操作，通过JavaScript代码完成；服务端验证是整个应用阻止非法数据的最后防线，通过在应用种编程实现</p><blockquote><p>JSR 303 验证</p></blockquote><p>需要Hibernate Validator</p><ol><li>配置文件配置</li></ol><pre><code class="xml">&lt;!-- 配置错误信息 --&gt;&lt;bean id=&quot;messageSource&quot;class=&quot;org.springframework.context.support.ReloadableResourceBundleMessageSource&quot;&gt;&lt;property name=&quot;basename&quot;value=&quot;/WEB-INF/resource/errorMessages&quot;&gt;&lt;/property&gt;&lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 配置JSR303验证 使用的Hibernate --&gt;&lt;bean id=&quot;validator&quot; class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;&gt;&lt;property name=&quot;providerClass&quot; value=&quot;org.hibernate.validator.HibernateValidator&quot;&gt;&lt;/property&gt;&lt;property name=&quot;validationMessageSource&quot; ref=&quot;messageSource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;mvc:annotation-driven validator=&quot;validator&quot;&gt;&lt;/mvc:annotation-driven&gt;</code></pre><ol start="2"><li>添加资源文件errorMessages.properties</li></ol><pre><code class="properties">student.name=姓名不能为空student.height=身高必须在1~2.3米之间student.birthday=生日不能晚于当前日期之前</code></pre><ol start="3"><li>直接在模型上使用</li></ol><pre><code class="java">public class StudentJSR {    @NotBlank(message = &quot;{student.name}&quot;)    private String name;    @NotNull(message = &quot;{student.height}&quot;)    @DecimalMin(value = &quot;1.0&quot;,message = &quot;{student.height}&quot;)    @DecimalMax(value = &quot;2.3&quot;,message = &quot;{student.height}&quot;)    private Double height;    @NotNull(message = &quot;{student.birthday}&quot;)    @DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)    @Past(message = &quot;{student.birthday}&quot;)    private Date birthday;    //...getter,setter}</code></pre><ol start="4"><li>Controller上的使用</li></ol><pre><code class="java">@RequestMapping(&quot;/studentJSR&quot;)public String submit(@Valid @ModelAttribute(&quot;student&quot;) StudentJSR student,BindingResult result) {    if(result.hasErrors()) {        return &quot;student&quot;;    }else {        return &quot;studentInfo&quot;;    }}</code></pre><h3 id="Spring国际化"><a href="#Spring国际化" class="headerlink" title="Spring国际化"></a>Spring国际化</h3><p>国际化是商业软件系统的一个基本要求，因为当今的软件系统需要面向全球的浏览者。国际化的目的i就是根据用户的语言环境的不同向用户输出与之对应的页面，以示友好。</p><blockquote><p>添加资源属性文件message_en_US.properties<code>和</code>message_zh_CN.properties</p></blockquote><pre><code class="properties">language.zh=中文language.en=Englishusername=Usernamepassword=Passwordsubmit=Submitwelcome=Welcom Loginlogin.result=Login Resulterror=Username or Password is error</code></pre><pre><code class="properties">language.zh=中文language.en=英文username=用户名password=密码submit=登录welcome=欢迎登录login.result=登录结果error=用户名或密码错误</code></pre><blockquote><p>springmvc的配置文件种添加配置</p></blockquote><pre><code class="xml">&lt;bean id=&quot;messageSource&quot;      class=&quot;org.springframework.context.support.ReloadableResourceBundleMessageSource&quot;&gt;    &lt;property name=&quot;basename&quot;              value=&quot;/WEB-INF/resource/message&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;localeResolver&quot; class=&quot;org.springframework.web.servlet.i18n.SessionLocaleResolver&quot;&gt;    &lt;property name=&quot;defaultLocale&quot; value=&quot;zh_CN&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;mvc:interceptors&gt;    &lt;bean class=&quot;org.springframework.web.servlet.i18n.LocaleChangeInterceptor&quot;&gt;&lt;/bean&gt;&lt;/mvc:interceptors&gt;</code></pre><blockquote><p>使用spring表达式</p></blockquote><ol><li>引入标签库</li></ol><pre><code class="jsp">&lt;%@taglib prefix=&quot;spring&quot; uri=&quot;http://www.springframework.org/tags&quot;%&gt;</code></pre><ol start="2"><li>使用spring表达式，显示文本消息</li></ol><pre><code>&lt;spring:message code=&quot;language.zh&quot; /&gt;</code></pre><ol start="3"><li>spring:message标签属性</li></ol><ul><li><p>code : 指定了<code>message_zh_CN.properties</code>文件中的<code>key</code></p></li><li><p>arguments: 代表该<code>code</code>的参数，用于填充{0}这样的序列（最多有10个参数）</p><pre><code>third={0}ssss{1}</code></pre><pre><code>&lt;spring:message code=&quot;third&quot; arguments=&quot;888,999&quot; /&gt;</code></pre></li><li><p>argumentSeparator: 用来分隔该标签参数的字符, 默认逗号分隔</p></li><li><p>text: <code>code</code>属性不存在，或指定的key无法获取消息时所显示的默认文本消息</p></li></ul><h3 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h3><p>因为各种可预知的、不可预知的异常需要处理，如果每个过程都单独处理异常，那么系统的代码耦合度高，工作量大且不好同意，以后维护的工作量也大，所以将所有类型的异常处理从各层解耦出来，这样既能保证相关处理过程的功能单一，又实现了异常信息的同意处理和维护。</p><p>SpringMVC有以下三种处理方式</p><blockquote><p>简单异常处理SimpleMappingExceptionResolver</p></blockquote><p>提前配置异常类与View的对应关系</p><pre><code class="xml">&lt;!-- 配置SimpleMappingExceptionResolver （异常类与view对应关系）--&gt;&lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;    &lt;property name=&quot;defaultErrorView&quot; value=&quot;Defaulterror&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;exceptionMappings&quot;&gt;        &lt;props&gt;            &lt;!--自定义的异常，发生异常后跳转的页面--&gt;            &lt;prop key=&quot;exception.MyException&quot;&gt;MYerror&lt;/prop&gt;            &lt;prop key=&quot;java.sql.SQLException&quot;&gt;DBerror&lt;/prop&gt;        &lt;/props&gt;    &lt;/property&gt;    &lt;!--页面显示的异常值--&gt;    &lt;property name=&quot;exceptionAttribute&quot; value=&quot;ex&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><blockquote><p>实现HandlerExceptionResolver接口自定异常</p></blockquote><ol><li>实现接口</li></ol><pre><code class="java">package exception;@Componentpublic class MyExceptionHandler implements HandlerExceptionResolver {    @Override    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object object,            Exception e) {        ModelAndView mv = new ModelAndView();        mv.addObject(&quot;ex&quot;, e);        if(e instanceof SQLException) {            mv.setViewName(&quot;DBerror&quot;);        }else if(e instanceof MyException) {            mv.setViewName(&quot;MYerror&quot;);        }else {            mv.setViewName(&quot;Defaulterror&quot;);        }        return mv;    }}</code></pre><ol start="2"><li>springmvc.xml扫描exception包</li></ol><blockquote><p>使用@ExceptionHandler注解实现异常处理</p></blockquote><ol><li>添加BaseControrller类</li></ol><pre><code>public abstract class BaseController {    @ExceptionHandler    public ModelAndView exception(Exception exception) {        ModelAndView mv = new ModelAndView();        mv.addObject(&quot;ex&quot;, exception);        if(exception instanceof SQLException) {            mv.setViewName(&quot;DBerror&quot;);        }else if(exception instanceof MyException) {            mv.setViewName(&quot;MYerror&quot;);        }else {            mv.setViewName(&quot;Defaulterror&quot;);        }        return mv;    }}</code></pre><ol start="2"><li>所有的Controller类都继承BaseController</li></ol><h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><p>Spring MVC 框架的文件上传是基于commons-fileupload组件的文件上传。上传下载需要commons-fileupload.jar和commons-io.jar</p><blockquote><p>文件上传</p></blockquote><ol><li>添加配置</li></ol><pre><code class="xml">&lt;mvc:resources location=&quot;/uploadfiles/&quot; mapping=&quot;/uploadfiles/**&quot;&gt;&lt;/mvc:resources&gt;&lt;!-- 使用spring的commonsMultipartResolver配置MultipartResovler用于文件上传 --&gt;&lt;bean id=&quot;multipartResolver&quot;class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;&lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;&lt;property name=&quot;maxUploadSize&quot; value=&quot;5400000&quot;&gt;&lt;/property&gt;&lt;property name=&quot;uploadTempDir&quot; value=&quot;temp&quot;&gt;&lt;/property&gt;            &lt;/bean&gt;</code></pre><ol start="2"><li>页面HTML</li></ol><pre><code class="html">&lt;form action=&quot;${pageContext.request.contextPath }/upload&quot; method=&quot;post&quot;enctype=&quot;multipart/form-data&quot;&gt;请选择文件&amp;nbsp;&lt;input type=&quot;file&quot; name=&quot;imgfile&quot; /&gt;&lt;br /&gt; &lt;inputtype=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;</code></pre><ol start="3"><li>上传代码</li></ol><pre><code class="java">@RequestMapping(&quot;/upload&quot;)    public String upload(MultipartFile imgfile,HttpServletRequest request, Model model) {        String filepath= request.getServletContext().getRealPath(&quot;uploadfiles&quot;);        File file = new File(filepath);        if(!file.exists()) { // 如果文件不存在，就创建文件夹            file.mkdirs();        }        String originalFilename = imgfile.getOriginalFilename(); // 浏览器传来的文件名        File fileTarget = new File(filepath,originalFilename);   // 目标文件的全路径名        try {            imgfile.transferTo(fileTarget); //将接收的文件转移到webContent目录uploadfiles下        } catch (IllegalStateException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (IOException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        model.addAttribute(&quot;imgfilename&quot;, originalFilename);        return &quot;show&quot;;    }</code></pre><blockquote><p>文件下载</p></blockquote><p>下载代码</p><pre><code class="java">@RequestMapping(&quot;/download&quot;)    public String download(@RequestParam String fileName,HttpServletRequest request,HttpServletResponse response) {        String filepath= request.getServletContext().getRealPath(&quot;uploadfiles&quot;);        File file = new File(filepath);        if(!file.exists()) { // 如果文件不存在，就创建文件夹uploadfiles            file.mkdirs();        }        try {            FileInputStream in = new FileInputStream(filepath + &quot;\\&quot; + fileName);            ServletOutputStream out = response.getOutputStream();            out.flush();            int readlength = 0;            byte [] b = new byte[1024];            while(((readlength = in.read(b))!=-1) &amp;&amp; in!=null) {                out.write(b,0,readlength);            }            out.flush();            out.close();            in.close();            System.out.println(&quot;下载完成！&quot;);        } catch (Exception e) {            e.printStackTrace();        }        return null;    }public String toUTF8String(String str){// 将编码改成utf-8        StringBuffer sb = new StringBuffer();        int len = str.length();        for(int i = 0; i &lt; len; i++){            char c = str.charAt(i);            if(c &gt;= 0 &amp;&amp; c &lt;= 255){                sb.append(c);            }            else{                byte b[];                try {                    b = Character.toString(c).getBytes(&quot;UTF-8&quot;);                }                 catch (UnsupportedEncodingException e) {                    e.printStackTrace();                    b = null;                }                for(int j = 0; j &lt; b.length; j ++){                    int k = b[j];                    if(k &lt; 0){                        k &amp;= 255;                    }                    sb.append(&quot;%&quot; + Integer.toHexString(k).toUpperCase());                }            }        }        return sb.toString();    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring 国际化</title>
      <link href="2020/04/28/spring%E5%9B%BD%E9%99%85%E5%8C%96/"/>
      <url>2020/04/28/spring%E5%9B%BD%E9%99%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-国际化"><a href="#spring-国际化" class="headerlink" title="spring 国际化"></a>spring 国际化</h1><h2 id="1-效果展示"><a href="#1-效果展示" class="headerlink" title="1. 效果展示"></a>1. 效果展示</h2><p><img src="../../../../images/Snipaste_2020-04-28_10-54-15-1588042783730.png" alt="Snipaste_2020-04-28_10-54-15"><br><img src="../../../../images/Snipaste_2020-04-28_10-54-29-1588042800277.png" alt="Snipaste_2020-04-28_10-54-29"><br><img src="../../../../images/Snipaste_2020-04-28_10-54-55.png" alt="Snipaste_2020-04-28_10-54-55"><br><img src="../../../../images/Snipaste_2020-04-28_10-55-19.png" alt="Snipaste_2020-04-28_10-55-19"></p><h2 id="2-导入jar包，ssm一般用到的包就行"><a href="#2-导入jar包，ssm一般用到的包就行" class="headerlink" title="2. 导入jar包，ssm一般用到的包就行"></a>2. 导入jar包，ssm一般用到的包就行</h2><h2 id="3-创建resource文件夹，保存不同语言的文件"><a href="#3-创建resource文件夹，保存不同语言的文件" class="headerlink" title="3. 创建resource文件夹，保存不同语言的文件"></a>3. 创建resource文件夹，保存不同语言的文件</h2><blockquote><p>在WEB-INF文件夹中创建如<code>message_en_US.properties</code>和<code>message_zh_CN.properties</code></p></blockquote><pre><code class="properties">language.zh=中文language.en=Englishusername=Usernamepassword=Passwordsubmit=Submitwelcome=Welcom Loginlogin.result=Login Resulterror=Username or Password is error</code></pre><pre><code class="properties">language.zh=中文language.en=英文username=用户名password=密码submit=登录welcome=欢迎登录login.result=登录结果error=用户名或密码错误</code></pre><h2 id="4-在springmvc的配置文件中添加配置"><a href="#4-在springmvc的配置文件中添加配置" class="headerlink" title="4. 在springmvc的配置文件中添加配置"></a>4. 在springmvc的配置文件中添加配置</h2><pre><code class="xml">&lt;bean id=&quot;messageSource&quot;      class=&quot;org.springframework.context.support.ReloadableResourceBundleMessageSource&quot;&gt;    &lt;property name=&quot;basename&quot;              value=&quot;/WEB-INF/resource/message&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;localeResolver&quot; class=&quot;org.springframework.web.servlet.i18n.SessionLocaleResolver&quot;&gt;    &lt;property name=&quot;defaultLocale&quot; value=&quot;zh_CN&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;mvc:interceptors&gt;    &lt;bean class=&quot;org.springframework.web.servlet.i18n.LocaleChangeInterceptor&quot;&gt;&lt;/bean&gt;&lt;/mvc:interceptors&gt;</code></pre><h2 id="5-编写jsp页面（实例）"><a href="#5-编写jsp页面（实例）" class="headerlink" title="5.编写jsp页面（实例）"></a>5.编写jsp页面（实例）</h2><pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib prefix=&quot;spring&quot; uri=&quot;http://www.springframework.org/tags&quot;%&gt;&lt;%    pageContext.setAttribute(&quot;APP_PATH&quot;, request.getContextPath());%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;spring:message code=&quot;welcome&quot; /&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;${APP_PATH }/?locale=zh_CN&quot;&gt;&lt;spring:message code=&quot;language.zh&quot; /&gt;&lt;/a&gt; |    &lt;a href=&quot;${APP_PATH }/?locale=en_US&quot;&gt;&lt;spring:message code=&quot;language.en&quot; /&gt;&lt;/a&gt;    &lt;h1&gt;&lt;spring:message code=&quot;welcome&quot; /&gt;&lt;/h1&gt;    &lt;form action=&quot;${APP_PATH }/submit&quot; method=&quot;post&quot;&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;td&gt;&lt;spring:message code=&quot;username&quot; /&gt;&lt;/td&gt;                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;spring:message code=&quot;password&quot; /&gt;&lt;/td&gt;                &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td colspan=&quot;2&quot;&gt;&lt;input type=&quot;submit&quot;                    value=&#39;&lt;spring:message code=&quot;submit&quot;/&gt;&#39;/&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/form&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        var errMsg = &quot;${errorMessage}&quot;;        if(errMsg != &quot;&quot;){            alert(&#39;&lt;spring:message code=&quot;submit&quot;/&gt;&#39;);        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="6-编写控制器类（实例）"><a href="#6-编写控制器类（实例）" class="headerlink" title="6. 编写控制器类（实例）"></a>6. 编写控制器类（实例）</h2><pre><code class="java">package controller;import java.util.Locale;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class LoginController {    @RequestMapping(&quot;/&quot;)    public String root(Locale locale) {        return &quot;login&quot;;    }    @RequestMapping(&quot;/submit&quot;)    public String submit(@ModelAttribute(&quot;username&quot;)String username,@ModelAttribute(&quot;password&quot;)String password,Model model) {        if(&quot;&quot;.equals(username) || &quot;&quot;.equals(password)) {            model.addAttribute(&quot;errorMessage&quot;, &quot;error&quot;);            return &quot;login&quot;;        }        return &quot;loginResult&quot;;    }}</code></pre><h2 id="7-使用到的知识"><a href="#7-使用到的知识" class="headerlink" title="7. 使用到的知识"></a>7. 使用到的知识</h2><blockquote><p>使用spring表达式</p></blockquote><ol><li>引入标签库</li></ol><pre><code class="jsp">&lt;%@taglib prefix=&quot;spring&quot; uri=&quot;http://www.springframework.org/tags&quot;%&gt;</code></pre><ol start="2"><li>使用spring表达式，显示文本消息</li></ol><pre><code>&lt;spring:message code=&quot;language.zh&quot; /&gt;</code></pre><ol start="3"><li><p>spring:message标签属性</p><ul><li><p>code : 指定了<code>message_zh_CN.properties</code>文件中的<code>key</code></p></li><li><p>arguments: 代表该<code>code</code>的参数，用于填充{0}这样的序列（最多有10个参数）</p><pre><code>third={0}ssss{1}</code></pre><pre><code>&lt;spring:message code=&quot;third&quot; arguments=&quot;888,999&quot; /&gt;</code></pre></li><li><p>argumentSeparator: 用来分隔该标签参数的字符, 默认逗号分隔</p></li><li><p>text: <code>code</code>属性不存在，或指定的key无法获取消息时所显示的默认文本消息</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mybatis-generator（利用maven）</title>
      <link href="2020/04/27/%E4%BD%BF%E7%94%A8mybatis-generator/"/>
      <url>2020/04/27/%E4%BD%BF%E7%94%A8mybatis-generator/</url>
      
        <content type="html"><![CDATA[<h1 id="使用mybatis-generator（利用maven）"><a href="#使用mybatis-generator（利用maven）" class="headerlink" title="使用mybatis-generator（利用maven）"></a>使用mybatis-generator（利用maven）</h1><h2 id="1-导入插件工具"><a href="#1-导入插件工具" class="headerlink" title="1. 导入插件工具"></a>1. 导入插件工具</h2><pre><code class="xml">&lt;build&gt;    &lt;finalName&gt;zsxt&lt;/finalName&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;1.3.2&lt;/version&gt;            &lt;configuration&gt;                &lt;verbose&gt;true&lt;/verbose&gt;                &lt;overwrite&gt;true&lt;/overwrite&gt;            &lt;/configuration&gt;            &lt;dependencies&gt;                &lt;dependency&gt;                    &lt;groupId&gt;mysql&lt;/groupId&gt;                    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                    &lt;version&gt;5.1.47&lt;/version&gt;                &lt;/dependency&gt;            &lt;/dependencies&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><h2 id="2-建立配置文件"><a href="#2-建立配置文件" class="headerlink" title="2.建立配置文件"></a>2.建立配置文件</h2><blockquote><p>在resources目录下，新建generatorConfig.xml文件，提前创建好targetPackage的文件</p></blockquote><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;    &lt;context id=&quot;default&quot; targetRuntime=&quot;MyBatis3&quot;&gt;        &lt;!-- optional，旨在创建class时，对注释进行控制 --&gt;        &lt;commentGenerator&gt;            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;        &lt;/commentGenerator&gt;        &lt;!--配置数据库连接信息--&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;                        connectionURL=&quot;jdbc:mysql://localhost:3306/ssm_crud&quot;                        userId=&quot;root&quot;                        password=&quot;123456&quot;/&gt;        &lt;!--指定javabean生成的位置--&gt;        &lt;javaModelGenerator targetPackage=&quot;com.example.pojo&quot; targetProject=&quot;src/main/java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/javaModelGenerator&gt;        &lt;!--指定sql映射文件生成的位置--&gt;        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/sqlMapGenerator&gt;        &lt;!--指定dao接口生成的位置,mapper接口--&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.example.dao&quot; targetProject=&quot;src/main/java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/javaClientGenerator&gt;        &lt;!--指定每个表的生成策略--&gt;        &lt;table tableName=&quot;tbl_emp&quot; domainObjectName=&quot;Employee&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;/&gt;        &lt;table tableName=&quot;tbl_dept&quot; domainObjectName=&quot;Department&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;/&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><h2 id="3-配置maven"><a href="#3-配置maven" class="headerlink" title="3. 配置maven"></a>3. 配置maven</h2><p>输入： <code>mybatis-generator:generate -e</code></p><p><img src="../../../../images/Snipaste_2020-04-27_22-18-34.png" alt="Snipaste_2020-04-27_22-18-34"></p><h2 id="4-点击生成"><a href="#4-点击生成" class="headerlink" title="4. 点击生成"></a>4. 点击生成</h2><p><img src="../../../../images/Snipaste_2020-04-27_22-19-30.png" alt="Snipaste_2020-04-27_22-19-30"></p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis 分页插件 PageHelper</title>
      <link href="2020/04/27/%E4%BD%BF%E7%94%A8PageHelper/"/>
      <url>2020/04/27/%E4%BD%BF%E7%94%A8PageHelper/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-分页插件-PageHelper"><a href="#MyBatis-分页插件-PageHelper" class="headerlink" title="MyBatis 分页插件 PageHelper"></a>MyBatis 分页插件 PageHelper</h1><h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.  导入依赖"></a>1.  导入依赖</h2><pre><code class="xml">&lt;!--引入PageHelper插件--&gt;&lt;dependency&gt;    &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;    &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;    &lt;version&gt;5.1.4&lt;/version&gt;&lt;/dependency&gt;</code></pre><h2 id="2-在mybatis文件中配置PageHelper"><a href="#2-在mybatis文件中配置PageHelper" class="headerlink" title="2. 在mybatis文件中配置PageHelper"></a>2. 在mybatis文件中配置PageHelper</h2><pre><code class="xml">&lt;!--分页插件--&gt;&lt;plugins&gt;    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;        &lt;!--分页参数合理化--&gt;        &lt;property name=&quot;reasonable&quot; value=&quot;true&quot;/&gt;    &lt;/plugin&gt;&lt;/plugins&gt;</code></pre><h2 id="3-使用PageHelper"><a href="#3-使用PageHelper" class="headerlink" title="3. 使用PageHelper"></a>3. 使用PageHelper</h2><pre><code class="java">@RequestMapping(&quot;/empList&quot;)@ResponseBodypublic MsgJson getEmpsWithJson(@RequestParam(value = &quot;pn&quot;,defaultValue = &quot;1&quot;)Integer pn) {    // 引入PageHelper    // 在查询之前只需要调用，传入页码，以及每页的大小    PageHelper.startPage(pn, 5);    // startPage后面紧跟的这个查询就是一个分页查询    List&lt;Employee&gt; employeeList = employeeService.getAll();    // 使用pageInfo包装查询以后的结果，只需要将pageInfo交给页面就行了    // 封装了详细的分页信息，包裹有我们查询出来的信息,传入连续显示的页数    PageInfo&lt;Employee&gt; page = new PageInfo&lt;&gt;(employeeList,5);    return MsgJson.success().add(&quot;pageInfo&quot;,page);}</code></pre><h2 id="4-常用对象描述"><a href="#4-常用对象描述" class="headerlink" title="4. 常用对象描述"></a>4. 常用对象描述</h2><p><img src="../../../../images/Snipaste_2020-04-27_21-43-29.png" alt="Snipaste_2020-04-27_21-43-29"></p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习</title>
      <link href="2020/04/16/SpringMVC%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
      <url>2020/04/16/SpringMVC%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h1><pre><code class="xml">    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;            &lt;version&gt;1.3.3&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;            &lt;version&gt;4.0.1&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><h1 id="添加配置Springmvc-xml"><a href="#添加配置Springmvc-xml" class="headerlink" title="添加配置Springmvc.xml"></a>添加配置Springmvc.xml</h1><pre><code class="xml">    &lt;!--文件上传配置--&gt;    &lt;bean class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;          id=&quot;multipartResolver&quot;&gt;        &lt;!--请求的编码格式，必须和jsp的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1--&gt;        &lt;property name=&quot;defaultEncoding&quot; value=&quot;utf-8&quot;/&gt;        &lt;!--上传文件大小限制，单位为字节(10485760=10M)--&gt;        &lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760&quot;/&gt;        &lt;property name=&quot;maxInMemorySize&quot; value=&quot;40960&quot;/&gt;    &lt;/bean&gt;</code></pre><h1 id="文件上传代码"><a href="#文件上传代码" class="headerlink" title="文件上传代码"></a>文件上传代码</h1><pre><code class="java">    @RequestMapping(&quot;/upload&quot;)    public String fileUpload(@RequestParam(&quot;file&quot;)CommonsMultipartFile file, HttpServletRequest request) throws IOException {        // 获取文件名 ：        String uploadFileName = file.getOriginalFilename();        // 如果文件名为空，直接回到首页        if (&quot;&quot;.equals(uploadFileName)) {            return &quot;redirect:/index.jsp&quot;;        }        System.out.println(&quot;上传的文件名为：&quot; + uploadFileName);        // 上传路径保存设置        String path = request.getServletContext().getRealPath(&quot;/upload&quot;);        // 如果路径不存在，创建一个        File realPath = new File(path);        if (!realPath.exists()) {            realPath.mkdirs();        }        System.out.println(&quot;上传的文件路径&quot;+realPath);        InputStream is = file.getInputStream(); // 文件输入流        OutputStream os = new FileOutputStream(new File(realPath, uploadFileName)); // 文件输出流        //读去写出        int len = 0;        byte[] buffer = new byte[1024];        while ((len=is.read(buffer))!=-1) {            os.write(buffer,0,len);            os.flush();        }        os.close();        is.close();        return &quot;redirect:/index.jsp&quot;;    }    @RequestMapping(&quot;/upload2&quot;)    public String fileUpload2(@RequestParam(&quot;file&quot;)CommonsMultipartFile file, HttpServletRequest request)throws IOException{        // 上传路径保存设置        String path = request.getServletContext().getRealPath(&quot;/upload&quot;);        File realPath = new File(path);        if (!realPath.exists()) {            realPath.mkdirs();        }        // 上传文件地址        System.out.println(&quot;上传的文件路径&quot;+realPath);        // 通过CommonsMultipartFile的方法直接写文件（）        file.transferTo(new File(realPath+&quot;/&quot;+ file.getOriginalFilename()));        return &quot;redirect:/index.jsp&quot;;    }</code></pre><h1 id="文件下载代码"><a href="#文件下载代码" class="headerlink" title="文件下载代码"></a>文件下载代码</h1><pre><code class="java">@RequestMapping(&quot;/download&quot;)    public String downloads(HttpServletResponse response,HttpServletRequest request) throws Exception{        // 要下载的图片地址        String path = request.getServletContext().getRealPath(&quot;/upload&quot;);        String fileName = &quot;1.png&quot;;        // 1. 设置response响应头        response.reset();// 设置页面不缓存，清空buffer        response.setCharacterEncoding(&quot;UTF-8&quot;);// 字符编码        response.setContentType(&quot;multipart/form-data&quot;); // 二进制传输数据        // 设置响应头        response.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;fileName=&quot;+ URLEncoder.encode(fileName,&quot;UTF-8&quot;));        File file = new File(path, fileName);        // 2. 读取文件-输入流        FileInputStream input = new FileInputStream(file);        // 3. 写入文件-输出流        ServletOutputStream output = response.getOutputStream();        byte[] buff = new byte[1024];        int index=0;        // 4. 执行写出操作        while ((index=input.read(buff)) != -1) {            output.write(buff,0,index);            output.flush();        }        output.close();        input.close();        return null;    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm学习相关配置</title>
      <link href="2020/03/24/ssm%E5%AD%A6%E4%B9%A0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2020/03/24/ssm%E5%AD%A6%E4%B9%A0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h2><p>applicationContext.xml</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd           http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;&lt;/beans&gt;</code></pre><p>组件扫描</p><pre><code class="xml">&lt;context:component-scan base-package=&quot;pojo&quot;&gt;&lt;/context:component-scan&gt;</code></pre><p>数据源</p><pre><code class="xml">&lt;!-- 配置数据源 --&gt;    &lt;bean id=&quot;datasource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;        &lt;!-- MySQL 数据库驱动 --&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;        &lt;!-- 连接数据库URL --&gt;        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&quot;&gt;&lt;/property&gt;        &lt;!-- 连接数据库的用户名 --&gt;        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;        &lt;!-- 连接数据库的密码 --&gt;        &lt;property name=&quot;password&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;        &lt;!-- 最大连接数 --&gt;        &lt;property name=&quot;maxTotal&quot; value=&quot;30&quot;&gt;&lt;/property&gt;        &lt;!-- 最大空闲连接数 --&gt;        &lt;property name=&quot;maxIdle&quot; value=&quot;10&quot;&gt;&lt;/property&gt;        &lt;!-- 初始化连接数 --&gt;        &lt;property name=&quot;initialSize&quot; value=&quot;5&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;</code></pre><p>事务管理</p><pre><code class="xml">    &lt;!-- 为数据源添加事务管理器 --&gt;    &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;</code></pre><pre><code class="xml">    &lt;!-- 为事务管理器注册驱动器 --&gt;    &lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;/&gt;</code></pre><p>mybatis配置</p><pre><code class="xml">&lt;!-- 配置MyBatis工厂，同时指定数据源，并于MyBatis完美配合 --&gt;&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;&gt;&lt;/property&gt;    &lt;!-- configLocation的属性值为MyBatis的核心配置文件 --&gt;    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><pre><code class="xml">&lt;!-- 使用Mapper代理开发，使用spring自动扫描MyBatis的接口并装配 --&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;    &lt;property name=&quot;basePackage&quot; value=&quot;dao&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h2 id="mybatis配置"><a href="#mybatis配置" class="headerlink" title="mybatis配置"></a>mybatis配置</h2><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;!-- 在使用MyBatis嵌套查询方式进行关联查询时，使用MyBatis的延时加载在一定程度可以提高查询效率 --&gt;    &lt;settings&gt;        &lt;!-- 打开延时加载的开关 --&gt;        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;        &lt;!-- 将积极加载改为按需加载 --&gt;        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;    &lt;/settings&gt;    &lt;mappers&gt;&lt;!-- 映射器，告诉MyBatis到哪里去找映射文件 --&gt;        &lt;mapper resource=&quot;mapper/StudentMapper.xml&quot; /&gt;        &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p>日志文件log4j.properties</p><pre><code class="properties"># Global logging configuration log4j.rootLogger=ERROR, stdout # MyBatis logging configuration... log4j.logger.dao=DEBUG # Console output... log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 安装配置 2</title>
      <link href="2020/03/01/centos%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE2/"/>
      <url>2020/03/01/centos%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE2/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS安装配置-2"><a href="#CentOS安装配置-2" class="headerlink" title="CentOS安装配置 2"></a>CentOS安装配置 2</h1><h2 id="MySQL-数据库的安装"><a href="#MySQL-数据库的安装" class="headerlink" title="MySQL 数据库的安装"></a>MySQL 数据库的安装</h2><p>MySQL数据库最早就是在Linux环境下发展起来的，而且在国内也是使用最多的一种数据库，那么本次对MySQL的安装与配置进行讲解。只需要登录MySQL官网就可以下载Linux版本：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><ol><li>【FTP开发包上传】如果要想进行组件的安装，那么实际上有两种做法：</li></ol><ul><li><p>如果你的系统在云服务主机之中，那么可以直接利用wget命令下载MySQL数据库</p><pre><code class="shell">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.17-linux-glibc2.12-x86_64.tar.xz</code></pre></li><li><p>使用ftp上传，利用fileZilla等工具，直接将文件拖到目标目录下</p></li></ul><ol start="2"><li><p>【组件解压缩】</p><pre><code>对于&quot;.tar.xz&quot;文件需要进行两次解压xz文件解压缩：xz -d /var/ftp/mysql-8.0.17-linux-glibc2.12-x86_64.tar.xztar文件解压缩：tar xvf /var/ftp/mysql-8.0.17-linux-glibc2.12-x86_64.tar -C /usr/local/目录更名：mv /usr/local/mysql-8.0.17-linux-glibc2.12-x86_64/ /usr/local/mysql</code></pre></li><li><p>【创建用户】如果要想使用MySQL服务则一定要提供有一个mysql的账户同时这个账户一定要加入到mysql组里面，为了保证安全还必须mysql账户不能够进行系统的登录：</p><pre><code>创建用户组groupadd mysql创建用户useradd -r -g mysql -s /bin/false mysql授权配置chown -R mysql:mysql ./</code></pre></li><li><p>【创建数据目录】如果要使用MySQL则一定要对MySQL数据库里面数据设置有一个专属的数据目录，实际的开发中，将此目录配置到相应的数据盘里面，本次为了模拟方便，会将MySQL直接配置到”/usr/data/mysql”目录</p><pre><code class="shell">创建目录mkdir -p /usr/data/mysql/{db,logs}目录授权chmod -R 777 /usr/data/mysql</code></pre></li><li><p>【卸载mariadb】在默认情况下CentOS系统内部会自动安装MariaDB数据库的安装，所以如果要想安装MySQL建议手工删除掉此组件</p><ul><li>查看系统是否装有MariaDB</li></ul><pre><code class="shell">rpm -qa | grep mariadb</code></pre><ul><li>卸载自动安装好的MariaDB</li></ul><pre><code class="shell">rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64</code></pre></li><li><p>【MySQL配置文件】如果要想使用MySQL则需要创建有一个配置文件：</p><pre><code class="shell">打开配置文件vi /etc/my.cnf</code></pre><pre><code class="yaml">配置文件内容[mysqld]# 设置3306端口port = 3306 # 设置mysql的安装目录basedir=/usr/local/mysql# 设置mysql数据库的数据的存放目录datadir=/usr/data/mysql/db# mysqlsock存储目录socket=/usr/data/mysql/db/mysql.sock# 允许最大连接数max_connections=10000# 允许连接失败的次数，这是为了防止有人从该主机试图攻击数据库系统max_connect_errors=10# 服务端使用的字符集默认为8character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB # 默认使用“mysql_native_password”插件认证default-authentication_plugin=mysql_native_password[mysql]# 设置mysql客户端默认字符集default-character-set=utf8 # mysqlsock 存储目录socket=/usr/data/mysql/db/mysql.sock[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8[mysqld_safe]log-error=/usr/data/mysql/logs/mysql.logpid-file=/usr/data/mysql/mysql.pid# mysqlsock 存储目录socket=/usr/data/mysql/db/mysql.sock</code></pre></li><li><p>【安装MySQL】此时配置完成之后就可以进行MySQL数据库的安装了：(可能需要<code>yum install libaio</code>)</p><pre><code class="shell">/usr/local/mysql/bin/mysqld --initialize --console会有一个初始化密码(冒号后的内容)形如 root@localhsot: d/nnri9&gt;7&gt;iM</code></pre><p>当此时的初始化执行完毕之后就会直接在控制台上打印初始化信息，同时会有在相应的数据目录里面保存有相关的文件内容</p></li><li><p>【启动MySQL】MySQL服务初始化之后就可以考虑进行MySQL数据库的服务启动：</p><pre><code class="shell">/usr/local/mysql/bin/mysqld_safe --user=root &gt; /dev/null 2&gt;&amp;1 &amp;</code></pre><table><thead><tr><th>前台启动</th><th>/usr/local/mysql/bin/mysqld_safe –user=root</th></tr></thead><tbody><tr><td>后台启动</td><td>/usr/local/mysql/bin/mysqld_safe –user=root &gt; /dev/null 2&gt;&amp;1 &amp;</td></tr></tbody></table></li><li><p>【MySQL控制台】当MySQL服务启动之后就可以直接进入到MySQL控制台，用户名：root,密码为初始化密码：</p><pre><code class="shell">/usr/local/mysql/bin/mysql -uroot -p输入初始化密码，即可登录成功</code></pre></li><li><p>【修改密码】当登录到MySQL数据库之后就可以考虑对当前的root账户密码进行修改，本次修改的密码为”mysqladmin”:</p><pre><code class="mysql">alter user &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;mysqladmin&#39;;</code></pre></li><li><p>【远程授权】此时的root账户只能够在本机进行访问，无法通过远程连接的模式进行访问，所以需要对root授权：</p><pre><code class="mysql">进入到mysql的数据库use mysql设置远程访问update user set user.Host=&#39;%&#39; where user.User=&#39;root&#39;;配置保存flush privileges;</code></pre></li><li><p>【连接测试】直接在本机上使用MySQL客户端进行连接测试</p></li><li><p>【SQL语句】既然可以正常连接到远程的MySQL数据库，所以这个时候可以考虑进行数据库与数据表的创建。</p><pre><code class="MYSQL">CREATE DATABASE test_connection CHARACTER SET UTF8;USE test_connection;CREATE TABLE news(    nid        BIGINT        AUTO_INCREMENT,    title    VARCHAR(200),    note    TEXT,    CONSTRAINT pk_nid PRIMARY KEY(nid)) engine=innodb;INSERT INTO news(title,note) VALUES(&quot;你好&quot;,&quot;www.fengfeng.com&quot;);SELECT * FROM news LIMIT 0,3;SELECT LAST_INSERT_ID();</code></pre></li><li><p>【数据库加密】现在所有MySQL中的数据内容全部都保存在了”/usr/data/mysql”目录里面，所以为了保证数据的安全，如果有需要可以直接进行目录的加密处理：</p><pre><code class="shell">/usr/local/mysql/bin/mysql_ssl_rsa_setup --datadir=/usr/data/mysql/db/</code></pre></li></ol><h2 id="JDK安装与配置"><a href="#JDK安装与配置" class="headerlink" title="JDK安装与配置"></a>JDK安装与配置</h2><p>​    有两种方式安装，一种是直接使用yum命令直接进行安装(openjdk)，另一种直接通过oracle官方网站下载相应的JDK版本</p><ol><li><p>【FTP上传】下载好对应JDK版本后，通过FTP进行文件的上传</p></li><li><p>【解压缩】JDK给定的文件可以直接进行解压缩的控制，将其解压缩到”usr/local”目录中：</p><pre><code class="shell">tar xzvf /var/ftp/jdk-8u161-linux-x64.tar.gz -C /usr/local/</code></pre></li><li><p>【目录更名】为了方便后续的配置处理，本次将解压缩之后的JDK进行重命名：</p><pre><code class="shell">mv /usr/local/jdk-8u161/ /usr/local/jdk</code></pre></li><li><p>【环境配置】此时的JDK属于一个独立的组件，所以如果要想使用，还需要进行系统环境的配置：</p><pre><code class="shell">打开配置文件vi /etc/profile在文件最后添加export JAVA_HOME=/usr/local/jdkexport PATH=$PATH:$JAVA_HOME/bin:使文件配置生效source /etc/profile</code></pre></li><li><p>【验证】直接输入”java -version”命令即可</p><p>成功后，此时JDK的配置就完成了，而后基于JDK开发的组件也就可以进行配置了</p></li></ol><h2 id="Tomcat安装与配置"><a href="#Tomcat安装与配置" class="headerlink" title="Tomcat安装与配置"></a>Tomcat安装与配置</h2><p>Tomcat是在Java行业之中鼎鼎大名的WEB服务器，其本身也是基于JDK开发的，所以一定要保证系统里面已经配置了JDK环境后才可以进行Tomcat服务的安装与使用，如果要想使用Tomcat则可以直接登录<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a>  站点进行Tomcat组件的下载</p><ol><li><p>【FTP上传】可以直接通过FTP进行组件的上传，或者直接使用wget命令下载：</p><pre><code class="shell">进入下载目录cd var/ftp下载软件包wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.22/bin/apache-tomcat-9.0.22.tar.gz</code></pre></li><li><p>【解压缩】下载得到的Tomcat进行一个解压缩：</p><pre><code class="shell">tar xzvf /var/ftp/apache-tomcat-9.0.22.tar.gz -C /usr/local/</code></pre></li><li><p>【目录更名】为了方便配置，可以将目录做一个简化更名处理：</p><pre><code class="shell">mv /usr/local/apache-tomcat-9.0.22 /usr/local/tomcat</code></pre></li><li><p>【修改端口】默认的Tomcat组件的端口是8080，现在将其修改为80：</p><pre><code>vi /usr/local/tomcat/conf/server.xml</code></pre><pre><code class="xml">修改位置内容&lt;Connector executor=&quot;tomcatThreadPool&quot; port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</code></pre></li><li><p>【内存调整】Tomcat本身基于JDK的操作，所以需要设置合理的内存：</p><pre><code class="shell">vi /usr/local/tomcat/bin/catalina.sh</code></pre><pre><code>添加内容JAVA_OPTS=&#39;-Xms1g -Xmx1g&#39;</code></pre></li><li><p>【Tomcat命令】现在Tomcat配置完成之后就可以通过给定的shell脚本进行Tomcat的启动与关闭：</p><table><thead><tr><th>启动Tomcat</th><th>/usr/local/tomcat/bin/catalina.sh  start</th></tr></thead><tbody><tr><td>关闭Tomcat</td><td>/usr/local/tomcat/bin/catalina.sh  stop</td></tr></tbody></table><p>当服务启动完成之后可以直接使用<code>netstat -nptl</code>命令查看80端口</p></li><li><p>【Java进程】Tomcat本身是一个Java进程，当JDK安装成功之后可以直接使用”jps”命令查看所有的Java相关进程</p></li><li><p>【浏览器访问】既然Tomcat已经可以成功的启动，那么就可以在外部通过浏览器进行web服务的访问：</p><p>浏览器地址栏：<a href="http://192.168.255.130/" target="_blank" rel="noopener">http://192.168.255.130/</a></p></li></ol><h2 id="SVN版本控制"><a href="#SVN版本控制" class="headerlink" title="SVN版本控制"></a>SVN版本控制</h2><p>在实际项目开发过程之中，版本控制工具肯定是不可或缺的重要技术支持环节</p><ol><li>【获取组件】SVN服务端组件默认情况下不会在系统之中进行安装，所以需要通过yum命令远程安装：</li></ol><pre><code class="shell">yum -y install subversion</code></pre><ol start="2"><li>【工作目录】如果要想使用SVN进行版本控制，则一定要创建有一个数据文件的存储目录：</li></ol><pre><code class="shell">mkdir -p usr/data/svn/fengfeng</code></pre><p>以后每一个项目都需要在”svn”目录下面创建不同的子目录分开进行保存</p><ol start="3"><li>【目录初始化】如果要想将创建的目录设置为SVN工作目录则还需要进行初始化的操作：</li></ol><pre><code class="shell">svnadmin create /usr/data/svn/fengfeng/</code></pre><p>一旦初始化完成，该目录下会包含有许多的配置文件信息，而这些配置文件肯定需要由开发者自己进行修改。</p><ol start="4"><li>【修改SVN 服务配置】所有的配置项都在”svnserve.conf”文件里面定义：</li></ol><pre><code class="shell">打开文件vi /usr/data/svn/fengfeng/conf/svnserve.conf并配置以下信息</code></pre><table><thead><tr><th align="left">anon-access = read</th><th>允许匿名用户读取文件</th></tr></thead><tbody><tr><td align="left">auth-access = write</td><td>授权访问才可以进行内容写入</td></tr><tr><td align="left">password-db = passwd</td><td>认证信息配置存储文件</td></tr><tr><td align="left">authz-db = authz</td><td>授权配置文件</td></tr></tbody></table><ol start="5"><li>【认证配置】随后需要进行认证信息的定义：</li></ol><pre><code class="shell">打开文件vi /usr/data/svn/fengfeng/conf/passwd添加用户及密码fengfeng = happy</code></pre><ol start="6"><li>【授权配置】为fengfeng用户授权：</li></ol><pre><code class="shell">打开文件vi /usr/data/svn/fengfeng/conf/authz</code></pre><pre><code>配置信息（添加）[aliases]# joe = /C=XZ/ST=Dessert/L=Snake City/0=Snake Oil, Ltd./OU=Reserch Institute/CN=Joe Average[groups]# harry_and_sally = harry,sally# harry_sally_and_joe = harry,sally,&amp;joe[/]fengfeng=rw# [/foo/bar]# harry = rw# &amp;joe = r# * = fengfeng=rw* =# [repository:/bar/fuz]# @harry_and_sally = rw# * = r* = r</code></pre><ol start="7"><li>【服务启动】当一切部署完成之后就可以直接利用svn命令启动服务：</li></ol><pre><code class="shell">svnserve -d -r /usr/data/svn/fengfeng/</code></pre><ol start="8"><li>【测试】服务启动完成之后就可以直接使用任意的SVN客户端进行连接测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 安装配置 1</title>
      <link href="2020/03/01/centos%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE1/"/>
      <url>2020/03/01/centos%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Centos安装配置-1"><a href="#Centos安装配置-1" class="headerlink" title="Centos安装配置 1"></a>Centos安装配置 1</h1><h2 id="简单修改"><a href="#简单修改" class="headerlink" title="简单修改"></a>简单修改</h2><ol><li><p>【创建虚拟机的配置】如果要想在虚拟机进行CentOS系统的安装，则一定要创建由一个新的虚拟机环境，同时在安装的过程之中尽可能提供较大的内存以及较多的CPU，可以让安装过程快速一些（本次选择的最小安装版本，是不带有常规服务的，几乎所有的服务都需要开发者自己进行配置）（root/xhf123456）</p></li><li><p>【修改字体大小】</p></li></ol><table><thead><tr><th>ls /lib/kbd/consolefonts</th><th>ls /lib/kbd/consolefonts |more (按字母’q’退出)</th></tr></thead><tbody><tr><td>setfont lat4-19</td><td></td></tr></tbody></table><p>将此设置为开机项(需要一个权限,可通过su获取管理员权限，exit退出管理员模式)</p><pre><code class="shell">echo &#39;setfont lat4-19&#39; &gt;&gt; /etc/bashrc</code></pre><p>管理员拥有的操作：重新启动(reboot)、关机(halt)</p><h2 id="SSH管理"><a href="#SSH管理" class="headerlink" title="SSH管理"></a>SSH管理</h2><p>在实际的工作之中为了解决系统管理问题，所以可以使用SSH工具进行系统的配置，这个服务可以直接进行命令的远程传输，而要想使用这个服务则必须要求开发者进行相应的组件安装。</p><ol><li>【检查SSH组件是否存在】在CentOS里面进行系统安装的时候虽然选择了最小化的系统环境，但是依然会有许多服务自动进行安装，所以首先检查一下当前系统里面是否已经有过<code>openssh</code>组件的存在：</li></ol><pre><code class="shell">rpm -qa | grep ssh</code></pre><ol start="2"><li>【安装ssh】如果现在检查之后发现当前的系统里面没有SSH组件，那么最简单的解决方案就是直接通过<code>yum</code>命令安装：(参数’-y’表示确认，没有需要用户手动确认)</li></ol><pre><code class="shell">yum -y install openssh-server</code></pre><p>国内yum需要配置为阿里的镜像或清华的镜像比如具体配置参考：<br><a href="https://blog.csdn.net/xiaojin21cen/article/details/84726193?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/xiaojin21cen/article/details/84726193?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p><ol start="3"><li>【ssh配置】在默认情况下，openssh服务组件时不允许root账户登录的，所以应该将这样的配置取消</li></ol><table><thead><tr><th>打开ssh配置文件</th><th>vi  /etc/ssh/sshd_config</th></tr></thead><tbody><tr><td>修改配置项</td><td>PermitRootLogin yes (将存在的注释“#”取消即可)</td></tr></tbody></table><ol start="4"><li>【重启SSH服务】由于此时配置文件已经修改了，所以如果要想进行新配置项的加载则必须进行服务的重新启动：</li></ol><table><thead><tr><th>停止SSH服务</th><th>/bin/systemctl stop sshd.service</th></tr></thead><tbody><tr><td>查看SSH服务</td><td>ps -ef | grep ssh</td></tr><tr><td>启动SSH服务</td><td>/bin/systemctl start sshd.service</td></tr></tbody></table><ol start="5"><li>【客户端】现在相当于系统打开了一个SSH的操作通道，该通道默认情况下占用的端口为22端口，于是就可以使用一些前端工具进行Linux主机的连接。</li></ol><h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><p>对当前系统软件环境做一些修改</p><ol><li>【防火墙状态】在CentOS系统安装完成之后会自动的提供有防火墙，对于一些服务来讲如果过多的关注于防火墙的影响会比较的麻烦，所以为了简单起见，最好的方法就是查看一下是否存在有防火墙，如果存在则进行删除。</li></ol><pre><code>查看防火墙的状态firewall-cmd --state关闭防火墙systemctl stop firewalld.service删除防火墙启动systemctl disable firewalld.service</code></pre><ol start="2"><li>【组件卸载】在CentOS系统之中除了防火墙之外实际上还有一个iptables组件，可以考虑将这个组件卸载，这样就不再需要重复的进行ip规则的定义了</li></ol><pre><code>yum -y remove iptables</code></pre><ol start="3"><li>【关闭SELinux】再CentOS系统里面为了方便的进行安全的配置，还提供了一个SELinux组件，这个组件继续使用，则每一次都需要进行各种的手工配置，这样对于学习不是很方便，所以选择禁用</li></ol><table><thead><tr><th>查看SELinux状态</th><th>getenforce</th></tr></thead><tbody><tr><td>打开配置文件</td><td>vi /etc/selinux/config</td></tr><tr><td>修改配置项</td><td>SELINUX=disabled</td></tr><tr><td>配置生效</td><td>reboot</td></tr></tbody></table><p>每一次只有再重新启动系统之后才会让新的SELinux配置生效（启动的时候需要加载配置文件）</p><ol start="4"><li>【组件更新】再CentOS里面所有的组件都是基于yum命令进行管理的,那么为了方便起见可以将当前的yum环境更新：</li></ol><pre><code class="shell">yum -y update</code></pre><ol start="5"><li>【依赖组件】当组件更新完成之后还需要进行一些额外组件的安装：</li></ol><pre><code class="shell">yum -y install make g++ gcc libpcre3 libpcrecpp* libpcre3-dev libssl-dev autoconf automake libtool libncurses5-dev libaio.dev net-tools wget autoconf libaio-devel.x84_64 tree</code></pre><p>这些组件里面有一些是为了后续进行C、C++源代码编译准备的程序以及相关的依赖库，同时还有一部分后其服务安装的支持包</p><h2 id="时区与时间"><a href="#时区与时间" class="headerlink" title="时区与时间"></a>时区与时间</h2><p>在使用虚拟机进行学习的过程之中，经常需要进行服务集群的搭建，而在服务集群之中，如果要想进行成功的服务提供，首先要保持的就是所有主机的时区和时间一定要同步。</p><ol><li>【设置时区】虽然现在的系统都可以自动的进行时区与时间同步，但是为了准确一些还是采用自定义配置模式（暗号：5 9 11）</li></ol><pre><code class="shell">tzselect</code></pre><ul><li><p>选择当前主机所在的位置，本次选择是在亚洲：5</p></li><li><p>选择用户所在国家的名称：9</p></li><li><p>选择所在的城市时区：1</p></li><li><p>是否做保存：1</p></li></ul><ol start="2"><li>【组件安装】如果要想进行时间的同步处理，则一定要与国家的时间服务器进行同步，而如果要想实现这样的同步处理则必须安装有ntp的组件</li></ol><pre><code class="shell">yum -y install ntp ntpdate</code></pre><ol start="3"><li>【同步时间】如果要想进行实践的同步则一定要有相应的时间服务器，而对于时间服务器来讲有很多，本次为了方便选择阿里云提供的时间服务器进行实践同步：</li></ol><pre><code class="shell">ntpdate -u ntp1.aliyun.com</code></pre><ol start="4"><li>【保存配置】此时所实现的实践服务器的同步并没有保存在系统硬件之中，如果不保存则每一次都必须手工进行同步处理，所以最简单的做法是直接将其写入到硬件环境：</li></ol><pre><code class="shell">hwclock --systohc</code></pre><p>那么此时就可以保证在每一次重启CentOS系统之后都可以得到一个同步后的时间内容。</p><h2 id="FTP-文件服务"><a href="#FTP-文件服务" class="headerlink" title="FTP 文件服务"></a>FTP 文件服务</h2><p>FTP是一个文件传输协议，如果要进行一些CentOS系统文件内容的传输使用FTP会比较容易一些，在集群环境里面为了方便进行服务的配置，可以考虑手工上传一些文件，这样如果使用FTP就会比较方便。</p><ol><li>【安装组件】在CentOS系统默认安装的过程之中并没有提供FTP组件的应用，所以应该先通过服务器进行该组件的下载：</li></ol><pre><code class="shell">yum -y install vsftpd</code></pre><p>当组件安装完成之后实际上就会有一个ftp账户，而该账户对应有一个工作目录”/var/ftp”</p><ol start="2"><li>【服务配置】如果要想使用FTP服务，则必须对FTP配置文件进行一些处理</li></ol><pre><code class="shell">vi /etc/vsftpd/vsftpd.conf</code></pre><table><thead><tr><th>行数</th><th>配置项</th><th>描述</th><th></th></tr></thead><tbody><tr><td>12</td><td>anonymous_enable=NO</td><td>不允许匿名访问</td><td></td></tr><tr><td>83</td><td>ascii_upload_enable=YES</td><td>允许上传ascii文件</td><td></td></tr><tr><td>84</td><td>ascii_download_enable=YES</td><td>允许下载ascii文件</td><td></td></tr><tr><td>86</td><td>ftpd_banner=Welcome to :<a href="http://www.fengfeng.com" target="_blank" rel="noopener">www.fengfeng.com</a></td><td>用户登录之后出现的提示信息</td><td></td></tr><tr><td>101</td><td>chroot_local_user=YES</td><td>只允许用户进行工作目录的访问</td><td></td></tr><tr><td>102</td><td>chroot_list_enable=YES</td><td>允许进行工作目录的列表</td><td></td></tr><tr><td>104</td><td>chroot_list_file=/etc/vsftpd/chroot_list</td><td>定义授权用户列表配置文件路径</td><td></td></tr><tr><td>末尾</td><td>allow_writeable_chroot=YES</td><td>(自己编写)允许进行文件的写入</td><td></td></tr></tbody></table><ol start="3"><li>【密码配置】在ftp组件安装完成之后就需要进行ftp账户的密码配置，为了方便起见，本次使用的密码是”fengfeng@happy”</li></ol><pre><code class="shell">passwd ftp</code></pre><p>   密码需要输入两次</p><ol start="4"><li>【FTP列表】如果想要使用ftp账户还需要做一个用户的列表文件：</li></ol><pre><code>vi /etc/vsftpd/chroot_list输入ftp</code></pre><ol start="5"><li>【目录授权】ftp用户默认访问的路径为”/var/ftp”，所以为了方便上传处理，可以考虑将完全控制的权限交付给此目录：</li></ol><pre><code class="shell">chmod -R 777 /var/ftp</code></pre><ol start="6"><li>【授权变更】以上的配置完成之后需要修改一下授权文件：(注释两行内容)</li></ol><pre><code class="shell">vi /etc/pam.d/vsftpd</code></pre><table><thead><tr><th>#auth  required  pam_listfile.so.item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed</th></tr></thead><tbody><tr><td>#auth  required  pam_shell.so</td></tr></tbody></table><ol start="7"><li>【FTP命令】当配置完成之后就可以考虑直接启动FTP服务，关于FTP的控制命令有如下几种</li></ol><table><thead><tr><th>FTP服务启动</th><th>systemctl start vsftpd.service</th></tr></thead><tbody><tr><td>FTP服务关闭</td><td>systemctl stop vsftpd.service</td></tr><tr><td>FTP服务重启</td><td>systemctl restart vsftpd.service</td></tr></tbody></table><ol start="8"><li>【自启动配置】此时已经成功的使用FTP服务了，但是对于当前的服务是每一次重新启动系统之后都需要手动开启，这样的方式肯定不方便，所以最好将其设置为自动启动：</li></ol><pre><code class="shell">systemctl enable vsftpd.service</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I have a dream</title>
      <link href="2020/01/30/I%20have%20a%20dream/"/>
      <url>2020/01/30/I%20have%20a%20dream/</url>
      
        <content type="html"><![CDATA[<h1 id="I-have-a-dream"><a href="#I-have-a-dream" class="headerlink" title="I have a dream"></a>I have a dream</h1><p><strong>马丁·路德·金</strong></p><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.</p><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves, who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of their captivity.</p><p>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we’ve come here today to dramatize a shameful condition.</p><p>In a sense we have come to our nation’s capital to cash a check. When the architects of our republic wrote the magnificent words of the Constitution and the Declaration of Independence, they were signing a promissory note to which every American was to fall heir. This note was a promise that all men, yes, black men as well as white men, would be guaranteed the unalienable rights of life, liberty, and the pursuit of happiness. It is obvious today that America has defaulted on this promissory note, insofar as her citizens of color are concerned. Instead of honoring this sacred obligation, America has given the Negro people a bad check, a check which has come back marked “insufficient funds.”</p><p>But we refuse to believe that the bank of justice is bankrupt. We refuse to believe that there are insufficient funds in the great vaults of opportunity of this nation. And so we have come to cash this check, a check that will give us upon demand the riches of freedom and the security of justice.</p><p>We have also come to this hallowed spot to remind America of the fierce urgency of Now. This is no time to engage in the luxury of cooling off or to take the tranquilizing drug of gradualism. Now is the time to make real the promises of democracy. Now is the time to rise from the dark and desolate valley of segregation to the sunlit path of racial justice. Now is the time to lift our nation from the quicksands of racial injustice to the solid rock of brotherhood. Now is the time to make justice a reality for all of God’s children.</p><p>It would be fatal for the nation to overlook the urgency of the moment. This sweltering summer of the Negro’s legitimate discontent will not pass until there is an invigorating autumn of freedom and equality. Nineteen sixty-three is not an end but a beginning. Those who hope that the Negro needed to blow off steam and will now be content will have a rude awakening if<br>the nation returns to business as usual. There will be neither rest nor tranquility in America until the Negro is granted his citizenship rights. The whirlwinds of revolt will continue to shake the foundations of our nation until the bright day of justice emerges.</p><p>But there is something that I must say to my people who stand on the warm threshold which leads into the palace of justice. In the process of gaining our rightful place we must not be guilty of wrongful deeds. Let us not seek to satisfy our thirst for freedom by drinking from the cup of bitterness and hatred. We must ever conduct our struggle on the high plane of dignity and discipline. We must not allow our creative protest to degenerate into physical violence. Again and again we must rise to the majestic heights of meeting physical force with soul force.</p><p>The marvelous new militancy which has engulfed the Negro community must not lead us to a distrust of all white people, for many of our white brothers, as evidenced by their presence here today, have come to realize that their destiny is tied up with our destiny. And they have come to realize that their freedom is inextricably bound to our freedom. We cannot walk alone.</p><p>And as we walk, we must make the pledge that we shall always march ahead. We cannot turn back. There are those who are asking the devotees of civil rights, “When will you be satisfied?” We can never be satisfied as long as the Negro is the victim of the unspeakable horrors of police brutality. We can never be satisfied as long as our bodies, heavy with the fatigue of travel, cannot gain lodging in the motels of the highways and the hotels of the cities. We cannot be satisfied as long as a Negro in Mississippi cannot vote and a Negro in New York believes he has nothing for which to vote. No, no, we are not satisfied and we will not be satisfied until justice rolls down like waters and righteousness like a mighty stream.</p><p>I am not unmindful that some of you have come here out of great trials and tribulations. Some of you have come fresh from narrow jail cells. Some of you have come from areas where your quest for freedom left you battered by the storms of persecutions and staggered by the winds of police brutality. You have been the veterans of creative suffering. Continue to work with the faith that unearned suffering is redemptive. Go back to Mississippi, go back to Alabama, go back to South Carolina, go back to Georgia, go back to Louisiana, go back to the slums and ghettos of our northern cities, knowing that somehow this situation can and will be changed. Let us not wallow in the valley of despair, I say to you today, my friends. And so even though we face the difficulties of today and tomorrow, I still have a dream. It is a dream deeply rooted in the American dream.</p><p>I have a dream that one day this nation will rise up and live out the true meaning of its creed: We hold these truths to be self-evident that all men are created equal.</p><p>I have a dream that one day on the red hills of Georgia the sons of former slaves and the sons of former slave owners will be able to sit down together at the table of brotherhood.</p><p>I have a dream that one day even the state of Mississippi, a state sweltering with the heat of injustice, sweltering with the heat of oppression, will be transformed into an oasis of freedom and justice.</p><p>I have a dream that my four little children will one day live in a nation where they will not be judged by the color of their skin but by the content of their character. I have a dream today!</p><p>I have a dream that one day, down in Alabama, with its vicious racists, with its governor having his lips dripping with the words of interposition and nullification; one day right down in Alabama little black boys and black girls will be able to join hands with little white boys and white girls as sisters and brothers. I have a dream today!</p><p>I have a dream that one day every valley shall be exalted, and every hill and mountain shall be made low, the rough places will be made plain, and the crooked places will be made straight, and the glory of the Lord shall be revealed and all flesh shall see it together.</p><p>This is our hope. This is the faith that I will go back to the South with. With this faith we will be able to hew out of the mountain of despair a stone of hope. With this faith we will be able to transform the jangling discords of our nation into a beautiful symphony of brotherhood. With this faith we will be able to work together, to pray together, to struggle together, to go to jail together, to stand up for freedom together, knowing that we will be free one day. And this will be the day, this will be the day when all of God’s children will be able to sing with new meaning, “My country ‘tis of thee, sweet land of liberty, of thee I sing. Land where my fathers died, land of the Pilgrim’s pride, from every mountainside, let freedom ring!” And if America is to be a great nation, this must become true.</p>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> english </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词学习</title>
      <link href="2020/01/26/%E5%8D%95%E8%AF%8D%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/01/26/%E5%8D%95%E8%AF%8D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="单词学习"><a href="#单词学习" class="headerlink" title="单词学习"></a>单词学习</h1><p><img src="../../../../images/%E5%8D%95%E8%AF%8D%E7%BB%84%E6%88%90.png" alt></p><h2 id="前缀篇"><a href="#前缀篇" class="headerlink" title="前缀篇"></a>前缀篇</h2><ol><li><h4 id="ab-离去，相反，不"><a href="#ab-离去，相反，不" class="headerlink" title="ab-     离去，相反，不"></a>ab-     离去，相反，不</h4></li></ol><blockquote><p>abnormal        a. 反常的</p><p>abuse               n./ v.  滥用</p></blockquote><ol start="2"><li><h4 id="anti-相反，反对"><a href="#anti-相反，反对" class="headerlink" title="anti-     相反，反对"></a>anti-     相反，反对</h4></li></ol><blockquote><p>antiwar            a. 反战的</p><p>antiaging         a. 防衰老的</p><p>antiforeign      a. 排外的</p><p>antinoise         a. 抗噪音的</p></blockquote><ol start="3"><li><h4 id="a-双写首字母-加强"><a href="#a-双写首字母-加强" class="headerlink" title="a+双写首字母-     加强"></a>a+双写首字母-     加强</h4></li></ol><blockquote><p>account            n. 账目，存款</p><p>attract               v. 吸引</p><p>assimilate         v. 同化</p><p>affluent             a. 富裕的</p></blockquote><ol start="4"><li><h4 id="co-col-con-com-一起"><a href="#co-col-con-com-一起" class="headerlink" title="co- / col- / con- / com-      一起"></a>co- / col- / con- / com-      一起</h4></li></ol><blockquote><p>cooperation      n. 合作</p><p>collaboration     n. 合作</p><p>contribute          v. 贡献</p><p>communicate     v. 通信，交流</p></blockquote><ol start="5"><li><h4 id="counter-反对，相反"><a href="#counter-反对，相反" class="headerlink" title="counter-          反对，相反"></a>counter-          反对，相反</h4></li></ol><blockquote><p>counterattack          n./v. 反击</p><p>countereffect           n. 反效果</p><p>countertrend            n. 反潮流</p></blockquote><ol start="6"><li><h4 id="de-否定；除去；向下"><a href="#de-否定；除去；向下" class="headerlink" title="de- 否定；除去；向下"></a>de- 否定；除去；向下</h4></li></ol><blockquote><p>denationlize             v. 非国有化</p><p>decompose               v. 分解</p><p>demerit                      n. 缺点</p><p>deforest                     v. 砍伐树林</p><p>decolour                     v. 使褪色</p><p>decode                        v. 解码</p><p>depress                        v. 使沮丧，使萧条</p><p>devalue                        v. 贬值</p></blockquote><ol start="7"><li><h4 id="dis-不；除去；分开"><a href="#dis-不；除去；分开" class="headerlink" title="dis-      不；除去；分开"></a>dis-      不；除去；分开</h4></li></ol><blockquote><p>disorder                        n. 无秩序                  mental disorder   精神病</p><p>disappear                     v. 消失</p><p>disforest                       v. 开伐山林</p><p>discolor                         v. 使褪色</p><p>distract                          v. 分心</p><p>distribute                      v. 分配</p></blockquote><ol start="8"><li><h4 id="ex-外，前任的"><a href="#ex-外，前任的" class="headerlink" title="ex-         外，前任的"></a>ex-         外，前任的</h4></li></ol><blockquote><p>export                           v. 出口</p><p>exit                                 n. 出口</p><p>exclude                           v. 排外</p><p>ex-boyfriend                 n. 前男友</p></blockquote><ol start="9"><li><h4 id="fore-前，先，预先"><a href="#fore-前，先，预先" class="headerlink" title="fore-     前，先，预先"></a>fore-     前，先，预先</h4></li></ol><blockquote><p>forehead                       n. 前额</p><p>forefather                     n. 祖先</p><p>foresee                          v. 预知</p></blockquote><ol start="10"><li><h4 id="in-向里；不；加强"><a href="#in-向里；不；加强" class="headerlink" title="in-         向里；不；加强"></a>in-         向里；不；加强</h4></li></ol><blockquote><p>indoor                            a. 室内的</p><p>inbreathe                       v. 吸入</p><p>incorrect                        a. 错误的</p><p>incomplete                    a. 不完全的</p><p>intense                           a. 热情的，强烈的            tend  .tens  =   stretch</p><p>innovative                      a. 创新的</p></blockquote><ol start="11"><li><h4 id="im-向里；不；加强"><a href="#im-向里；不；加强" class="headerlink" title="im-         向里；不；加强"></a>im-         向里；不；加强</h4></li></ol><blockquote><p>import                           n./v. 进口</p><p>immerge                       v. 侵入，侵没</p><p>impossible                    a. 不可能的</p><p>imbalance                     n. 不平衡</p><p>impose                           v. 加强，征税</p><p>impulse                         n. 冲动</p></blockquote><ol start="12"><li><h4 id="mis-错"><a href="#mis-错" class="headerlink" title="mis-          错"></a>mis-          错</h4></li></ol><blockquote><p>misuse                           v. 误用，滥用</p><p>misfortune                    n. 不幸</p><p>misunderstand             v. 误会</p></blockquote><ol start="13"><li><h4 id="out-超过；外"><a href="#out-超过；外" class="headerlink" title="out-         超过；外"></a>out-         超过；外</h4></li></ol><blockquote><p>outnumber                     v. 在数量上超过</p><p>outspend                         v. 花费过度</p><p>outdoor                            a. 户外的</p></blockquote><ol start="14"><li>over-       过度</li></ol><blockquote><p>overpraise                       n./v. 过奖</p><p>overstudy                        v. 过度学习</p></blockquote><ol start="15"><li><h4 id="post-后"><a href="#post-后" class="headerlink" title="post-        后"></a>post-        后</h4></li></ol><blockquote><p>postwar                          a. 战后</p><p>postpone                        v. 推后</p><p>postgraduate                 n. 研究生</p></blockquote><ol start="16"><li><h4 id="pre-前"><a href="#pre-前" class="headerlink" title="pre-        前"></a>pre-        前</h4></li></ol><blockquote><p>prehistory                       n. 史前时期</p><p>precondition                   n. 前提条件</p></blockquote><ol start="17"><li><h4 id="pro-向前"><a href="#pro-向前" class="headerlink" title="pro-       向前"></a>pro-       向前</h4></li></ol><blockquote><p>progress                          n. 进步</p><p>prolong                            v. 向前延申</p></blockquote><ol start="18"><li><h4 id="re-向后；再一次"><a href="#re-向后；再一次" class="headerlink" title="re-         向后；再一次"></a>re-         向后；再一次</h4></li></ol><blockquote><p>return                               v. 回来，返回</p><p>recall                                 v. 召回</p><p>regress                             v. 倒退</p><p>rebirth                              n. 再生</p><p>reconsider                       v. 重新考虑</p></blockquote><ol start="19"><li><h4 id="sub-下；下级"><a href="#sub-下；下级" class="headerlink" title="sub-          下；下级"></a>sub-          下；下级</h4></li></ol><blockquote><p>subway                            n. 地铁</p><p>subaverage                      a. 低于平均水平的</p><p>subtitle                             n. 副标题</p><p>subbranch                       n. 分支，分公司</p></blockquote><ol start="20"><li><h4 id="trans-转移"><a href="#trans-转移" class="headerlink" title="trans-         转移"></a>trans-         转移</h4></li></ol><blockquote><p>transform                        v. 改变</p><p>transplant                        v. 移植</p><p>transposition                   n. 互换位置</p></blockquote><ol start="21"><li><h4 id="数字前缀"><a href="#数字前缀" class="headerlink" title="数字前缀"></a>数字前缀</h4></li></ol><blockquote><h6 id="mono-1"><a href="#mono-1" class="headerlink" title="mono-1"></a>mono-1</h6><p>monotone                 n. 单调</p><p>monodrama              n. 独角戏</p><h6 id="bi-2"><a href="#bi-2" class="headerlink" title="bi-2"></a>bi-2</h6><p>bicycle                         n. 自行车</p><p>bilateral                       a. 双边的</p><h6 id="di-2"><a href="#di-2" class="headerlink" title="di- 2"></a>di- 2</h6><p>dioxide                         n. 二氧化物</p><p>divorce                         v./n. 离婚</p><h6 id="tri-3"><a href="#tri-3" class="headerlink" title="tri- 3"></a>tri- 3</h6><p>triangle                        n. 三角形</p><p>trike                              n. 三轮车</p><h6 id="hemi-半"><a href="#hemi-半" class="headerlink" title="hemi-半"></a>hemi-半</h6><p>hermisphere                n. 半球</p><p>hemicycle                     n. 半圆形</p><h6 id="semi-半"><a href="#semi-半" class="headerlink" title="semi-半"></a>semi-半</h6><p>semifinal                       n. 半决赛</p><p>semiautomatic            a. 半自动的</p><h6 id="poly-多"><a href="#poly-多" class="headerlink" title="poly- 多"></a>poly- 多</h6><p>monopoly                     n. 垄断</p><p>polytechnic                  n. 理工学校</p><h6 id="multi-多"><a href="#multi-多" class="headerlink" title="multi-多"></a>multi-多</h6><p>multi-purpose             a. 多功能的</p><p>multi-media                 n. 多媒体</p></blockquote><h2 id="后缀篇"><a href="#后缀篇" class="headerlink" title="后缀篇"></a>后缀篇</h2><ol><li><h4 id="able-【形容词后缀】能…的，具有…性质的"><a href="#able-【形容词后缀】能…的，具有…性质的" class="headerlink" title="-able           【形容词后缀】能…的，具有…性质的"></a>-able           【形容词后缀】能…的，具有…性质的</h4></li></ol><blockquote><p>useable                          a. 可用的</p><p>movable                        a. 可移动的</p><p>adaptable                      a. 可适应的</p></blockquote><ol start="2"><li><h4 id="al"><a href="#al" class="headerlink" title="-al"></a>-al</h4></li></ol><blockquote><h6 id="【形容词后缀】具有…性质的，属于…的"><a href="#【形容词后缀】具有…性质的，属于…的" class="headerlink" title="【形容词后缀】具有…性质的，属于…的"></a>【形容词后缀】具有…性质的，属于…的</h6><blockquote><p>personal                         a. 个人的</p><p>natural                            a. 自然的</p><p>regional                           a. 地区的，局部的</p></blockquote><h6 id="【名词后缀】抽象名词；人"><a href="#【名词后缀】抽象名词；人" class="headerlink" title="【名词后缀】抽象名词；人"></a>【名词后缀】抽象名词；人</h6><blockquote><p>refusal                             n. 拒绝</p><p>arrival                              n. 到达</p><p>survival                            n. 幸存，幸存者</p><p>criminal                           n. 犯罪                 </p></blockquote></blockquote><ol start="3"><li><h4 id="ate"><a href="#ate" class="headerlink" title="-ate"></a>-ate</h4></li></ol><blockquote><h6 id="【动词后缀】做，造成"><a href="#【动词后缀】做，造成" class="headerlink" title="【动词后缀】做，造成"></a>【动词后缀】做，造成</h6><blockquote><p>generate                          v. 造成</p><p>create                               v. 创作</p></blockquote><h6 id="【名词后缀】人"><a href="#【名词后缀】人" class="headerlink" title="【名词后缀】人"></a>【名词后缀】人</h6><blockquote><p>graduate                          n. 毕业生</p><p>candidate                         n. 候选人</p><p>advocate                          n. 支持者</p></blockquote></blockquote><ol start="4"><li><h4 id="ed-【形容词后缀】"><a href="#ed-【形容词后缀】" class="headerlink" title="-ed  【形容词后缀】"></a>-ed  【形容词后缀】</h4></li></ol><blockquote><h6 id="加在名词后，有…的"><a href="#加在名词后，有…的" class="headerlink" title="加在名词后，有…的"></a>加在名词后，有…的</h6><blockquote><p>gifted                                  a. 有天赋的                 talented</p><p>skilled                                  a. 熟练的</p><p>warm-hearted                    a. 热心的</p></blockquote><h6 id="加在动词后，已…的，被…-的"><a href="#加在动词后，已…的，被…-的" class="headerlink" title="加在动词后，已…的，被… 的"></a>加在动词后，已…的，被… 的</h6><blockquote><p>extended                            a. 延申的</p><p>educated                             a. 受过教育的</p><p>married                                a. 已婚的</p></blockquote></blockquote><ol start="5"><li><h4 id="en-【动词后缀】使变成"><a href="#en-【动词后缀】使变成" class="headerlink" title="-en         【动词后缀】使变成"></a>-en         【动词后缀】使变成</h4></li></ol><blockquote><p>shorten                                   v. 缩短</p><p>sharpen                                  v. 削尖</p><p>strengthen                             v. 加强</p></blockquote><ol start="6"><li><h4 id="ence-【名词后缀】抽象名词"><a href="#ence-【名词后缀】抽象名词" class="headerlink" title="-ence        【名词后缀】抽象名词"></a>-ence        【名词后缀】抽象名词</h4></li></ol><blockquote><p>difference                              n. 差别</p><p>confidence                             n. 信心</p><p>dependence                          n. 依赖</p></blockquote><ol start="7"><li><h4 id="ful-【形容词后缀】富有…，具有…性质的"><a href="#ful-【形容词后缀】富有…，具有…性质的" class="headerlink" title="-ful             【形容词后缀】富有…，具有…性质的"></a>-ful             【形容词后缀】富有…，具有…性质的</h4></li></ol><blockquote><p>useful                                     a. 有用的</p><p>hopeful                                  a. 抱有希望的</p><p>powerful                                a. 强大的</p></blockquote><ol start="8"><li><h4 id="ify-【动词后缀】使变成…"><a href="#ify-【动词后缀】使变成…" class="headerlink" title="-ify                 【动词后缀】使变成…"></a>-ify                 【动词后缀】使变成…</h4></li></ol><blockquote><p>simplify                                  v. 简化</p><p>beautify                                v. 美化</p><p>purify                                      v. 净化</p></blockquote><ol start="9"><li><h4 id="ic-【形容词后缀】…-的"><a href="#ic-【形容词后缀】…-的" class="headerlink" title="-ic                    【形容词后缀】… 的"></a>-ic                    【形容词后缀】… 的</h4></li></ol><blockquote><p>historic                                   a. 历史的</p><p>basic                                       a. 基本的</p><p>realistic                                   a. 现实的</p></blockquote><ol start="10"><li><h4 id="ion-【名词后缀】抽象名词"><a href="#ion-【名词后缀】抽象名词" class="headerlink" title="-ion                  【名词后缀】抽象名词"></a>-ion                  【名词后缀】抽象名词</h4></li></ol><blockquote><p>action                                    n. 行为，动作</p><p>correction                             n. 改正</p><p>discussion                             n. 讨论</p></blockquote><ol start="11"><li><h4 id="ism-【名词后缀】…-主义，流派，特性"><a href="#ism-【名词后缀】…-主义，流派，特性" class="headerlink" title="-ism               【名词后缀】… 主义，流派，特性"></a>-ism               【名词后缀】… 主义，流派，特性</h4></li></ol><blockquote><p>individualism                       n. 个人主义</p><p>capitalism                             n. 资本主义</p><p>modernism                           n. 现代主义</p><p>humanism                             n. 人道主义</p></blockquote><ol start="12"><li><h4 id="ist-【名词后缀】人，…-家"><a href="#ist-【名词后缀】人，…-家" class="headerlink" title="-ist                     【名词后缀】人，… 家"></a>-ist                     【名词后缀】人，… 家</h4></li></ol><blockquote><p>artist                                      n. 艺术家</p><p>communist                            n. 共产主义者</p><p>scientist                                  n. 科学家</p></blockquote><ol start="13"><li><h4 id="ive-【形容词后缀】有…性质的-作用的"><a href="#ive-【形容词后缀】有…性质的-作用的" class="headerlink" title="-ive                        【形容词后缀】有…性质的/作用的"></a>-ive                        【形容词后缀】有…性质的/作用的</h4></li></ol><blockquote><p>attractive                               a. 有魅力的</p><p>impressive                             a. 给人印象深刻的</p><p>creative                                   a. 有创造力的</p></blockquote><ol start="14"><li><h4 id="ize-【动词后缀】…-化"><a href="#ize-【动词后缀】…-化" class="headerlink" title="-ize                           【动词后缀】… 化"></a>-ize                           【动词后缀】… 化</h4></li></ol><blockquote><p>realize                                     v. 实现</p><p>centralize                                v. 集中</p><p>industrialize                            v. 工业化</p></blockquote><ol start="15"><li><h4 id="less-【形容词后缀】无…的"><a href="#less-【形容词后缀】无…的" class="headerlink" title="-less                           【形容词后缀】无…的"></a>-less                           【形容词后缀】无…的</h4></li></ol><blockquote><p>homeless                                a. 无家可归的</p><p>useless                                    a. 无用的</p><p>hopeless                                 a. 绝望的</p></blockquote><ol start="16"><li><h4 id="ment-【名词后缀】行为的过程或结果；物"><a href="#ment-【名词后缀】行为的过程或结果；物" class="headerlink" title="-ment                           【名词后缀】行为的过程或结果；物"></a>-ment                           【名词后缀】行为的过程或结果；物</h4></li></ol><blockquote><p>punishment                          n. 惩罚</p><p>development                        n. 发展</p><p>attachment                           n. 附件</p><p>basement                              n. 地下室</p></blockquote><ol start="17"><li><h4 id="ness-【名词后缀】抽象名词"><a href="#ness-【名词后缀】抽象名词" class="headerlink" title="-ness                            【名词后缀】抽象名词"></a>-ness                            【名词后缀】抽象名词</h4></li></ol><blockquote><p>weakness                             n. 弱点</p><p>kindness                               n. 仁慈</p><p>darkness                               n. 黑暗</p></blockquote><ol start="18"><li><h4 id="ship-【名词后缀】"><a href="#ship-【名词后缀】" class="headerlink" title="-ship                              【名词后缀】"></a>-ship                              【名词后缀】</h4></li></ol><blockquote><h6 id="情况，关系"><a href="#情况，关系" class="headerlink" title="情况，关系"></a>情况，关系</h6><blockquote><p>hardship                               n. 艰难困苦</p><p>friendship                             n. 友谊</p></blockquote><h6 id="身份，资格"><a href="#身份，资格" class="headerlink" title="身份，资格"></a>身份，资格</h6><blockquote><p>kingship                                    n. 王权，王位</p><p>membership                            n. 会员资格</p></blockquote></blockquote><ol start="19"><li><h4 id="ward-【形容词及副词后缀】向…的，朝…"><a href="#ward-【形容词及副词后缀】向…的，朝…" class="headerlink" title="-ward                          【形容词及副词后缀】向…的，朝…"></a>-ward                          【形容词及副词后缀】向…的，朝…</h4></li></ol><blockquote><p>downward                                   a./ad. 向下的(地)</p><p>backward                                    a./ad. 向后的(地)</p><p>northward                                   a./ad. 向北方的(地)</p></blockquote><ol start="20"><li><h4 id="y"><a href="#y" class="headerlink" title="-y"></a>-y</h4></li></ol><blockquote><h6 id="【形容词后缀】多…的，有…的"><a href="#【形容词后缀】多…的，有…的" class="headerlink" title="【形容词后缀】多…的，有…的"></a>【形容词后缀】多…的，有…的</h6><blockquote><p>rainy                                          a. 下雨的，多雨的</p><p>wordy                                        a. 冗长的，唠叨的</p><p>hairy                                          a. 多毛的</p></blockquote><h6 id="【名词后缀】抽象名词"><a href="#【名词后缀】抽象名词" class="headerlink" title="【名词后缀】抽象名词"></a>【名词后缀】抽象名词</h6><p>difficulty                                         n. 困难</p><p>discovery                                        n. 发现</p><p>mastery                                          n. 精通                good master of sth.</p></blockquote><h2 id="词根篇"><a href="#词根篇" class="headerlink" title="词根篇"></a>词根篇</h2><ol><li><h4 id="ced-cess-go-行走"><a href="#ced-cess-go-行走" class="headerlink" title="ced/cess = go      行走"></a>ced/cess = go      行走</h4></li></ol><blockquote><p>precede                                 v. 先于</p><p>unprecedentedly                  ad. 史无前例地</p><p>recede                                   v. 后退</p><p>recession                               n. 经济衰退</p><p>intercede                               v. 斡旋，调停</p><p>exceed                                    v. 超过</p><p>excess                                     n. 超过</p></blockquote><ol start="2"><li><h4 id="cid-cis-cut-kill-切，杀"><a href="#cid-cis-cut-kill-切，杀" class="headerlink" title="cid/cis = cut ,kill  切，杀"></a>cid/cis = cut ,kill  切，杀</h4></li></ol><blockquote><p>decide                                   v. 决定</p><p>concise                                  a. 简洁的</p><p>precise                                  a. 清晰的，准确的</p><p>suicide                                   n. 自杀</p><p>pesticide                               n. 杀虫剂</p></blockquote><ol start="3"><li><h4 id="claim-cry-shout-喊叫"><a href="#claim-cry-shout-喊叫" class="headerlink" title="claim = cry,shout    喊叫"></a>claim = cry,shout    喊叫</h4></li></ol><blockquote><p>exclaim                                 v. 呼喊，大叫</p><p>proclaim                               v. 宣告，公布</p><p>declaim                                 v. 演讲</p><p>reclaim                                  v. 收回，开拓</p><p>acclaim                                  v. 称赞</p></blockquote><ol start="4"><li><h4 id="clud-close-关闭"><a href="#clud-close-关闭" class="headerlink" title="clud = close      关闭"></a>clud = close      关闭</h4></li></ol><blockquote><p>include                                   v. 包括，包含</p><p>exclude                                   v. 排除，不包括</p><p>conclude                                 v. 结束，得出结果</p><p>seclude                                    v. 使隔绝</p></blockquote><ol start="5"><li><h4 id="duc-duct-lead-引导"><a href="#duc-duct-lead-引导" class="headerlink" title="duc/duct = lead     引导"></a>duc/duct = lead     引导</h4></li></ol><blockquote><p>introduce                                v. 介绍，引入</p><p>conduct                                   v. 指挥，执行，组织</p><p>seduce                                     v. 勾引，引诱</p><p>reduce                                      v. 减少</p><p>produce                                   v. 生产</p></blockquote><ol start="6"><li><h4 id="fer-bring-carry-带，拿"><a href="#fer-bring-carry-带，拿" class="headerlink" title="fer = bring,carry     带，拿"></a>fer = bring,carry     带，拿</h4></li></ol><blockquote><p>offer                                          v. 提供</p><p>prefer                                        v. 更喜欢</p><p>differ                                          v. 不同</p><p>transfer                                      v. 转移</p></blockquote><ol start="7"><li><h4 id="ject-throw-投掷"><a href="#ject-throw-投掷" class="headerlink" title="ject = throw    投掷"></a>ject = throw    投掷</h4></li></ol><blockquote><p>subject                                        n. 主题，话题</p><p>object                                          v. 反对</p><p>reject                                           v. 决绝，抛弃</p><p>project                                        v. 抛出，投出，发射      （projector投影仪）</p><p>inject                                           v. 注射</p></blockquote><ol start="8"><li><h4 id="migr-move-迁移"><a href="#migr-move-迁移" class="headerlink" title="migr = move   迁移"></a>migr = move   迁移</h4></li></ol><blockquote><p>migrate                                       v. 迁移</p><p>emigrate                                     v. 移居国</p><p>immigrate                                   v. 迁入</p><p>transmigrate                              v. 移居</p></blockquote><ol start="9"><li><h4 id="pend-pens"><a href="#pend-pens" class="headerlink" title="pend/pens ="></a>pend/pens =</h4></li></ol><blockquote><h6 id="hang-悬挂"><a href="#hang-悬挂" class="headerlink" title="hang   悬挂"></a>hang   悬挂</h6><blockquote><p>depend                                       v. 依靠</p><p>independent                              a. 独立自主的</p><p>suspend                                      v. 中止，悬而未决            （in suspence）</p></blockquote><h6 id="pay-花费"><a href="#pay-花费" class="headerlink" title="pay  花费"></a>pay  花费</h6><blockquote><p>expensive                              a. 昂贵的</p><p>pension                                  n. 退休金</p><p>compensate                          v. 补偿（for）</p></blockquote></blockquote><ol start="10"><li><h4 id="pos-put-放置"><a href="#pos-put-放置" class="headerlink" title="pos = put    放置"></a>pos = put    放置</h4></li></ol><blockquote><p>expose                                   v. 揭露（be exposed to）</p><p>compose                                v. 组成</p><p>oppose                                   v. 反对</p><p>dispose                                  v. 处理</p><p>propose                                  v. 提议，求婚</p><p>position                                  n. 位置   v. 安置</p></blockquote><ol start="11"><li><h4 id="rupt-break-破"><a href="#rupt-break-破" class="headerlink" title="rupt = break   破"></a>rupt = break   破</h4></li></ol><blockquote><p>bankrupt                                 v./n.  破产</p><p>disrupt                                     v. 使混乱，分裂</p><p>corrupt                                     v. 腐败，堕落</p><p>erupt                                        v. 爆发，喷发</p></blockquote><ol start="12"><li><h4 id="spect-look-看"><a href="#spect-look-看" class="headerlink" title="spect = look    看"></a>spect = look    看</h4></li></ol><blockquote><p>prospect                                    n. 前景</p><p>inspect                                       v. 检查</p><p>expect                                        v. 期望</p><p>respect                                       v./n. 尊敬</p><p>suspect                                       v. 怀疑</p><p>spectator                                    n. 观众</p></blockquote><ol start="13"><li><h4 id="tract-draw-拉，引"><a href="#tract-draw-拉，引" class="headerlink" title="tract = draw  拉，引"></a>tract = draw  拉，引</h4></li></ol><blockquote><p>tractor                                        n. 拖拉机</p><p>attract                                        v. 吸引</p><p>contract                                     n. 合同，契约</p><p>extract                                        v. 提取</p><p>distract                                       v. 使分心（distract one’s attention/mind）</p></blockquote><ol start="14"><li><h4 id="vert-vers-turn"><a href="#vert-vers-turn" class="headerlink" title="vert/vers = turn"></a>vert/vers = turn</h4></li></ol><blockquote><p>reverse                                       v. 反转</p><p>convert                                       v. 转变</p><p>diverse                                        a. 多种多样的</p><p>introvert                                     n. 内向的人</p><p>extrovert                                    n. 外向的人</p></blockquote><ol start="15"><li><h4 id="vis-vid-see"><a href="#vis-vid-see" class="headerlink" title="vis/vid = see"></a>vis/vid = see</h4></li></ol><blockquote><p>visible                                         a. 看得见的</p><p>revise                                          v. 复习，修订</p><p>previse                                        v. 预知</p><p>supervise                                    v. 监督</p><p>visual                                           a. 视觉的</p><p>evident                                        a. 明显的（obvious,apparent）</p><p>evidence                                      n. 证据</p></blockquote><ol start="16"><li><h4 id="viv-live-活"><a href="#viv-live-活" class="headerlink" title="viv = live   活"></a>viv = live   活</h4></li></ol><blockquote><p>revive                                            v. 复活，复苏</p><p>vivid                                               a. 生动的</p><p>survive                                          v. 幸存</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 IDEA快捷键收集</title>
      <link href="2020/01/21/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%94%B6%E9%9B%86/"/>
      <url>2020/01/21/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Win10-IDEA快捷键收集"><a href="#Win10-IDEA快捷键收集" class="headerlink" title="Win10 IDEA快捷键收集"></a>Win10 IDEA快捷键收集</h1><h2 id="1-查找类的快捷键"><a href="#1-查找类的快捷键" class="headerlink" title="1.  查找类的快捷键"></a>1.  查找类的快捷键</h2><blockquote><p>双击Shift :    查找任何内容<br>Ctrl + f :  当前文件夹中查找<br>Ctrl + Shift + f :  在项目或指定窗口中查找<br>Ctrl + n :  在项目中查找类<br>Ctrl + Shift + n :  查找文件<br>Ctrl + r :  在当前文件中文本替换<br>Ctrl + Shift + r :  在指定窗口中文本替换<br>Ctrl + g :  快速定位行<br>Ctrl + Alt + 左右键 :  跳转到前后编辑过的位置<br>Ctrl + Shift + 退格键 :  跳转到上次编辑的位置<br>Ctrl + Shift + alt + n :  查找变量或者方法<br>Alt + F7 ：  查找变量、方法或者类被引用的地方<br>Alt + F3 :  高亮显示选中的文本，Enter键跳转到下一个，Esc退出</p></blockquote><h2 id="2-编辑类的快捷键"><a href="#2-编辑类的快捷键" class="headerlink" title="2.  编辑类的快捷键"></a>2.  编辑类的快捷键</h2><blockquote><p>psvm+Tab：生成main方法<br>sout+Tab：生成输出语句<br>Ctrl+Y：删除当前行<br>Ctrl+D：复制当前行<br>Ctrl+Z：撤销<br>Ctrl+Shift+Z：还原撤销<br>Ctrl+O：重写方法<br>Ctrl+Shift+U：大小写转化<br>Ctrl+Shift+J：整合两行为一行<br>Alt+回车：自动修正<br>Alt+/：代码提示<br>Ctrl+Alt+L：格式化代码<br>Ctrl+Alt+T：生成try catch<br>Ctrl+Alt+O：优化导入的包<br>fori：生成for循环<br>iter：生成增强for循环</p></blockquote><h2 id="3-调试类的快捷键"><a href="#3-调试类的快捷键" class="headerlink" title="3. 调试类的快捷键"></a>3. 调试类的快捷键</h2><blockquote><p>Ctrl+F9：编译项目<br>Ctrl+Shift+F9：编译当前文件<br>Shift+F10：正常启动项目<br>Shift+F9：debug模式启动<br>Alt+Shift+F10：弹出Run可选菜单<br>Alt+Shift+F9：选择debug</p></blockquote><h2 id="4-debug相关快捷键-进入debug模式后"><a href="#4-debug相关快捷键-进入debug模式后" class="headerlink" title="4. debug相关快捷键(进入debug模式后)"></a>4. debug相关快捷键(进入debug模式后)</h2><blockquote><p>F7：进入方法内<br>F8：直接执行该方法（不进入）<br>F9：直接执行到下一个断点<br>Alt+F8：选中查看值（很有用）<br>Ctrl+Shift+F8：查看断点<br>Alt+F9：运行至光标位置<br>Alt+F10：定位到断点</p></blockquote><h2 id="5-其他比较常用的快捷键"><a href="#5-其他比较常用的快捷键" class="headerlink" title="5. 其他比较常用的快捷键"></a>5. 其他比较常用的快捷键</h2><blockquote><p>Ctrl+Shift+C：复制文件的完整路径<br>Ctrl+E：显示最近打开的文件<br>Ctrl+P：方法参数提示<br>Ctrl+Q：当前方法的声明/注释文档<br>Ctrl+Alt+空格：类名或者接口名提示<br>Ctrl+H：显示当前类的结构图<br>Ctrl+[：光标移动到当前所在代码花括号开始位置<br>Ctrl+]：光标移动到当前所在代码花括号开始位置</p></blockquote><p>来源于网络</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习</title>
      <link href="2020/01/11/Spring%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/01/11/Spring%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring学习"><a href="#Spring学习" class="headerlink" title="Spring学习"></a>Spring学习</h1><p><img src="../../../../images/spring-overview.png" alt="spring-overview"></p><h2 id="IoC的操作"><a href="#IoC的操作" class="headerlink" title="IoC的操作"></a>IoC的操作</h2><pre><code class="java">ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;ApplicationContext.xml&quot;);User user = (User) ac.getBean(&quot;user&quot;);</code></pre><h3 id="bean配置"><a href="#bean配置" class="headerlink" title="bean配置"></a>bean配置</h3><p><strong>在applicationContext.xml文件中</strong></p><pre><code class="xml">&lt;bean name=&quot;user&quot; class=&quot;com.shop.domain.User&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</code></pre><blockquote><p>name：类的别名</p><p>class：填写类的全限定名</p><p>scope：spring框架创建的对象的范围</p><p>​                singleton ：单例模式  （默认，整个项目中的对象只有一份）</p><p>​                prototype：多例模式（在项目中每次new出来都是一个全新的）</p></blockquote><p><strong>导入其他配置文件：</strong></p><pre><code class="xml">&lt;import resource=&quot;com/shop/domain/applicationContext.xml&quot;&gt;&lt;/import&gt;</code></pre><blockquote><p>resource：填写引入配置文件的路径</p></blockquote><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h4 id="1-注入方式"><a href="#1-注入方式" class="headerlink" title="1. 注入方式"></a>1. <strong>注入方式</strong></h4><h6 id="1-1-setter方法注入-一般"><a href="#1-1-setter方法注入-一般" class="headerlink" title="1.1 setter方法注入(一般)"></a>1.1 setter方法注入(一般)</h6><blockquote><pre><code class="xml">&lt;!-- 注册userService --&gt;&lt;bean id=&quot;userService&quot; class=&quot;com.shop.service.impl.UserService&quot;&gt;    &lt;property name=&quot;userDao&quot; ref=&quot;userDaoMyBatis&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 注册mybatis实现的dao --&gt;&lt;bean id=&quot;userDaoMyBatis&quot; class=&quot;com.shop.dao.impl.UserDaoMyBatis&quot;&gt;&lt;/bean&gt;</code></pre><pre><code class="java">public class UserService implements IUserService {    private IUserDao userDao1;    public void setUserDao(IUserDao userDao1) {        this.userDao1 = userDao1;    }    public void loginUser() {        userDao1.loginUser();    }}</code></pre></blockquote><h6 id="1-2-构造方法注入"><a href="#1-2-构造方法注入" class="headerlink" title="1.2 构造方法注入"></a>1.2 构造方法注入</h6><blockquote><pre><code class="xml">&lt;!-- 注册userService --&gt;&lt;bean id=&quot;userService&quot; class=&quot;com.shop.service.impl.UserService&quot;&gt;    &lt;constructor-arg name=&quot;userDao&quot; ref=&quot;userDaoJdbc&quot;&gt;&lt;/constructor-arg&gt;    &lt;constructor-arg name=&quot;user&quot; ref=&quot;user&quot;&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;!-- 注册实体User类，用于测试 --&gt;&lt;bean id=&quot;user&quot; class=&quot;com.shop.entity.User&quot;&gt;&lt;/bean&gt;&lt;!-- 注册jdbc实现的dao --&gt;&lt;bean id=&quot;userDaoJdbc&quot; class=&quot;com.shop.dao.impl.UserDaoJdbc&quot;&gt;&lt;/bean&gt;</code></pre><pre><code class="java">public class UserService implements IUserService {    private IUserDao userDao;    private User user;    public UserService(IUserDao userDao, User user) {        this.userDao = userDao;        this.user = user;    }    public void loginUser() {        userDao.loginUser();    }}</code></pre></blockquote><h6 id="1-3-基于注解注入"><a href="#1-3-基于注解注入" class="headerlink" title="1.3 基于注解注入"></a>1.3 基于注解注入</h6><h4 id="2-注入类型"><a href="#2-注入类型" class="headerlink" title="2. 注入类型"></a>2. <strong>注入类型</strong></h4><blockquote><p>基本类型    int    String</p><p>引用类型   （对象）</p><p>复杂类型    list     map     property   </p></blockquote><h6 id="2-1-注入基本类型"><a href="#2-1-注入基本类型" class="headerlink" title="2.1 注入基本类型"></a>2.1 <strong>注入基本类型</strong></h6><pre><code class="xml">&lt;bean name=&quot;user&quot; class=&quot;com.shop.domain.User&quot; scope=&quot;prototype&quot;&gt;    &lt;property name=&quot;name&quot; value=&quot;潘金莲&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><blockquote><p>name 属性：填写你要注入的字段名称</p><p>value 属性：填写你要注入的字段名称对应的值</p></blockquote><h6 id="2-2-注入引用类型"><a href="#2-2-注入引用类型" class="headerlink" title="2.2 注入引用类型"></a>2.2 <strong>注入引用类型</strong></h6><blockquote><ul><li>先将要注入的对象使用spring容器创建出来</li><li>再将创建好的对象注入进来</li></ul></blockquote><pre><code class="xml">&lt;bean name=&quot;carName&quot; class=&quot;com.shop.domain.Car&quot; scope=&quot;prototype&quot;&gt;    &lt;property name=&quot;name&quot; value=&quot;保时捷&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;color&quot; value=&quot;黄色&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean name=&quot;user&quot; class=&quot;com.shop.domain.User&quot; scope=&quot;prototype&quot;&gt;    &lt;property name=&quot;name&quot; value=&quot;潘金莲&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;car&quot; ref=&quot;carName&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建个人博客</title>
      <link href="2019/09/01/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2019/09/01/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Hexo-GitHub搭建免费个人博客"><a href="#使用Hexo-GitHub搭建免费个人博客" class="headerlink" title="使用Hexo+GitHub搭建免费个人博客"></a>使用Hexo+GitHub搭建免费个人博客</h1><h3 id="1、前言-争对windows用户"><a href="#1、前言-争对windows用户" class="headerlink" title="1、前言(争对windows用户)"></a>1、前言(争对windows用户)</h3><h4 id="1-1、准备工作"><a href="#1-1、准备工作" class="headerlink" title="1.1、准备工作"></a>1.1、准备工作</h4><ul><li>有一个github账号，没有的话去注册一个</li><li>本地安装<code>git</code><a href="http://git-scm.com/download/win" target="_blank" rel="noopener">下载</a></li><li>安装<code>node.js</code>长期版、<code>hexo</code><a id="more"></a></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="(注意)"></a>(注意)</h4><ol><li><p><strong>git下载好后需要的操作</strong>：</p><blockquote><p>将git和github链接起来（1~3步骤可省）</p><ol><li>打开GIt Bashs输入ssh-keygen获取ssh密钥(连续按Enter键)</li></ol><p><img src="../../../../images/%E8%8E%B7%E5%8F%96%E5%AF%86%E9%92%A5.png" alt="获取密钥"></p><ol start="2"><li>在本地找到id_rsa.pub这个文件并复制这个内容</li></ol><p><img src="../../../../images/%E5%A4%8D%E5%88%B6%E5%AF%86%E9%92%A5%E5%88%B0github.png" alt="复制密钥到github"></p><ol start="3"><li>github里，找到settings,填入密钥</li></ol><p><img src="../../../../images/github%E4%B8%AD%E6%89%BE%E5%88%B0setting%E5%86%8D%E7%82%B9%E5%87%BBssh%E5%B9%B6%E6%96%B0%E5%BB%BAssh.png" alt="github中找到setting再点击ssh并新建ssh"></p><ol start="4"><li>在本地建立git的虚拟email和name(以便日后推送文件,很重要)眼号内容自己写<br><img src="../../../../images/%E8%AE%BE%E7%BD%AEgit%E7%9A%84%E8%99%9A%E6%8B%9Femail%E5%92%8Cname.png" alt="设置git的虚拟email和name"></li></ol></blockquote></li><li><p><strong>下载hexo</strong></p><blockquote><ol><li>在Gti Bash中输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>(npm下载太慢，用cnpm下载)</li><li>在输入<code>cnpm install -g hexo-cli</code>(下载hexo)</li><li>根据自己的习惯在硬盘创建一个文件夹，如：Blog(今后博客文件都将在这个文件夹里)</li><li>初始化 ，在Blog文件夹下打开Git Bash 输入<code>hexo init</code></li><li>安装依赖，输入<code>hexo install</code></li><li>安装插件<code>cnpm install hexo-deployer-git --save</code></li><li>到这里要安装的东西就全部完成了，输入<code>hexo g</code>部署，输入<code>hexo s</code>开始在本地打开服务，在浏览器中输入<code>localhost:4000</code> 即可看见自己的博客。输入<code>hexo d</code>上传之github上。</li></ol></blockquote></li></ol><h3 id="2、搭建GitHub博客"><a href="#2、搭建GitHub博客" class="headerlink" title="2、搭建GitHub博客"></a>2、搭建GitHub博客</h3><h4 id="2-1、创建仓库"><a href="#2-1、创建仓库" class="headerlink" title="2.1、创建仓库"></a>2.1、创建仓库</h4><p>建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io了。" target="_blank" rel="noopener">http://test.github.io了。</a></p><h4 id="2-2、将本地博客托管之GitHub上"><a href="#2-2、将本地博客托管之GitHub上" class="headerlink" title="2.2、将本地博客托管之GitHub上"></a>2.2、将本地博客托管之GitHub上</h4><ul><li><p>打开Blog文件下的_config.yml文件</p></li><li><p>找到deploy并更新其值:</p><p><code>type: git</code>,</p><p><code>repo: https://github.com/test/test.github.io.git</code><br>(如果连接了ssh也可用 <code>repo: git@github.com:test/test.github.io.git</code>),<br><code>branch: master</code></p></li></ul><h3 id="3、修改博客主题"><a href="#3、修改博客主题" class="headerlink" title="3、修改博客主题"></a>3、修改博客主题</h3><p>这里推荐的一个主题是yilia</p><ol><li><p><strong>克隆主题</strong>，在Blog-&gt;themes目录下启动Git Bash输入</p><p><code>git clone https://github.com/litten/hexo-theme-yilia.git</code></p></li><li><p><strong>修改主题配置文件</strong>，打开上面提到的那个配置文件，将theme的值改为yilia</p></li><li><p><strong>重新部署博客</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="2019/08/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
      <url>2019/08/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-自顶向下语法分析方法"><a href="#第四章-自顶向下语法分析方法" class="headerlink" title="第四章 自顶向下语法分析方法"></a>第四章 自顶向下语法分析方法</h2><h3 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h3><ol><li><strong>FIRST集:</strong><blockquote><p>   ​             FIRST(左部) = FIRST(右部终结首符)<br>   ​             或  FIRST(左部)=FIRST(右部非终结首符)</p></blockquote><a id="more"></a></li></ol><ol start="2"><li><strong>FOLLOW集:</strong><blockquote><p>   S表示某非终结符<br>   ​<br>   ​            if    产生式右部 S的右边符号可为空时：<br>   ​<br>   ​                            FOLLOW(S) =(FIRST(右边符号)-{$\epsilon$}) U FOLLOW(左部)<br>   ​<br>   ​            if   产生式右部S的右边符号不为空时：<br>   ​<br>   ​                            FOLLOW(S) = (FIRST(右边符号)-{$\epsilon$}) U FOLLOW(左部)<br>   ​<br>   ​            if    产生式右部S的右边不存在时：<br>   ​<br>   ​                            FOLLOW(S) = FOLLOW(左部)<br>   ​</p></blockquote></li></ol><ol start="3"><li><strong>SELECT集：</strong><blockquote><p>   ​                    if   右部不为空时：<br>   ​<br>   ​                 SELECT(产生式) = FIRST(右部)<br>   ​           else<br>   ​<br>   ​                SELECT(产生式) = (FIRST(右部) - {$\epsilon$}) U FOLLOW(左部)<br>   ​</p></blockquote></li></ol><ol start="4"><li><strong>LL(1)文法：</strong><blockquote><p>判断：对每两个相同左部符的产生式求SELECT集的交集，若为空则是LL(1)文法。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大学课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
